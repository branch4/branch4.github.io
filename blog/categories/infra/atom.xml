<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Infra | branch4 Blog]]></title>
  <link href="http://blog.branch4.pw/blog/categories/infra/atom.xml" rel="self"/>
  <link href="http://blog.branch4.pw/"/>
  <updated>2014-08-23T14:15:20+09:00</updated>
  <id>http://blog.branch4.pw/</id>
  <author>
    <name><![CDATA[root4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hashicorpの新プロダクト、Terraformのドキュメントを読みましたよ！]]></title>
    <link href="http://blog.branch4.pw/blog/2014/08/23/using-hashicorp-terraform/"/>
    <updated>2014-08-23T01:00:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/08/23/using-hashicorp-terraform</id>
    <content type="html"><![CDATA[<p>はい、前回の宣言を無視して、Terraformエントリを書く<a href="https://twitter.com/xengineer01">@xengineer01</a>です。<br/>
(前回は、「次は Ansible」って言ってた)</p>

<h2>目的と概要</h2>

<hr />

<p>タイトルそのままです。<br/>
ほんとに読んだだけなんです！w</p>

<p>ちなみに、ドキュメント読みながらエントリ書いてみて、最終 terraform を実際使ってみるには至りませんでした。
結局こんなことに使うのね、というところまでは行ったものの、まだProviderサポートが弱いのと、
AWS をサポートしてるものの、EBS は作れなそうだったり、CloudFrontもこれからぽいので、
時間かけて使ってみても、僕が実用するのは先かな、ということで、</p>

<ul>
<li>ドキュメント読んでみた感想</li>
</ul>


<p>のみ！にとどまってますw</p>

<p><img src="http://blog.branch4.pw/images/2014/08/medium_2044819979.jpg" alt="readonly" /><br/>
photo credit: <a href="https://www.flickr.com/photos/takomabibelot/2044819979/">takomabibelot</a> via <a href="http://photopin.com">photopin</a> <a href="http://creativecommons.org/licenses/by/2.0/">cc</a></p>

<!-- more -->


<p></p>

<p>一応ね、terraform インストールして、実行計画見たり、グラフみたりはしましたけど、
普通に公式ドキュメントに載ってるやつなので、ここでは割愛。</p>

<p>全体的な感想としては、もうちょっと Providerが充実したら、使いどころによってはいいツールなんだろうなー。</p>

<h2>Terraform とは？</h2>

<hr />

<p><img src="http://blog.branch4.pw/images/2014/08/medium_4575417487.jpg" alt="terraform" /><br/>
photo credit: <a href="https://www.flickr.com/photos/torley/4575417487/">▓▒░ TORLEY ░▒▓</a> via <a href="http://photopin.com">photopin</a> <a href="http://creativecommons.org/licenses/by-sa/2.0/">cc</a></p>

<p>Serf/Consul/Vagrant/Packer を出してる、<a href="http://www.hashicorp.com">Hashicorp</a>の新プロダクト。<br/>
製品紹介には、、、</p>

<p>Terraform is a tool for building, changing, and combining infrastructure safely and efficiently.</p>

<p>って書いてある。つまり・・・</p>

<p>「Terraform は、安全で、効率的にインフラを構築/変更/組み合わせることができるツールですよこれ」</p>

<p>と・・・。Hashicorpさん！いまいち伝わらないっす！
海外のサイトの説明ってこんな感じな気がする。他のも調べてみよう・・・</p>

<h4>ansible</h4>

<p>Ansible is the simplest way to automate IT.<br/>
つまり、IT を自動化する、一番簡単な方法だよーん。と。</p>

<p>・・・ちょっとわかりづらい・・・かな。</p>

<h4>chef</h4>

<p>Automation for Web-Scale IT.<br/>
お、ちょっとわかりやすい。</p>

<h4>apache</h4>

<p>The Number One HTTP Server On The Internet<br/>
あ、すごい直球だった。</p>

<h4>MySQL</h4>

<p>The world&rsquo;s most popular open source database<br/>
うむ。ちょっと有名どころすぎるとわかりやすくなりすぎる。</p>

<h4>github</h4>

<p>Build software better, together.<br/>
コンセプトわかりやすい。</p>

<p>さて、茶番はこの辺にして本題へ。</p>

<p>結局、Terraform が何者か、よくわからないので、"learn more" ボタンをぽちっとな。</p>

<h2>ざっくり概要</h2>

<h3>INFRASTRUCTURE AS CODE</h3>

<p>コードでインフラを表現するためのテンプレ的なのを用意してくれてる、な感じぽい。
Vagrant を自由自在に使いこなしてる場合と、どう違うのかよくわからない。(Vagrantも使いこなせてないし)</p>

<p><img src="http://blog.branch4.pw/images/2014/08/medium_8106189987.jpg" alt="infra" /><br/>
photo credit: <a href="https://www.flickr.com/photos/andrewfhart/8106189987/">andrewfhart</a> via <a href="http://photopin.com">photopin</a> <a href="http://creativecommons.org/licenses/by-sa/2.0/">cc</a></p>

<h3>COMBINE MULTIPLE PROVIDERS</h3>

<p>ほほう。なんかここは、Vagrant と違いそうじゃないか？
そもそも Vagrant の Provider をまだ勉強してないからなんとも言えないけど。。。</p>

<p>ちょっと戻ってみる限り、Vagrantは、単一 Provider にしか対応してなし。</p>

<p>つまり、AWS でサーバ起動して、お名前に登録してる DNS を修正してくれる、的なこと？
(AWS と、お名前の 2 Provider)</p>

<p>それか、AWS/GCP 両方で使ってるインフラ管理できる？ま、使ってみればわかるかもしれないので、次を読んでいこう。</p>

<h3>EVOLVE YOUR INFRASTRUCTURE</h3>

<p>設定ファイルを、VCS に登録して、インフラをどんどん進化させていけるよ！
って・・・Vagrant でも Ansible でも、Chef でもなんでもそうだからな・・・</p>

<p><img src="http://blog.branch4.pw/images/2014/08/medium_2922128673.jpg" alt="evolve" /><br/>
photo credit: <a href="https://www.flickr.com/photos/spidermandragon5/2922128673/"><a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#x62;&#x72;&#x79;&#97;&#x6e;&#119;&#x72;&#x69;&#103;&#x68;&#x74;&#x35;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#x62;&#114;&#x79;&#x61;&#x6e;&#x77;&#114;&#105;&#x67;&#x68;&#x74;&#53;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></a> via <a href="http://photopin.com">photopin</a> <a href="http://creativecommons.org/licenses/by-nd/2.0/">cc</a></p>

<p>まだ凄さがわかりまてん。。。</p>

<h2>Terraform で何ができる？</h2>

<p>いきなり飛びますが、ざーーーーーっと、ドキュメントを読んでみました。
読み進めても、使いどころが、ふわっ、としてて、ちゃんと落ちてこなかった部分もあり、
読み進めてたら大体読み終わっちゃった、的なね。</p>

<p>以下僕が読んだ感じだと、、、</p>

<ul>
<li>インフラをコード(というか設定)で表現できる</li>
<li>インフラ設定を記述して、実行すると、設定通りの環境を構築できるよ！というもの

<ul>
<li>ここでいう「インフラ設定」は、大きく分けて下記2つかな、と思った

<ul>
<li>resource

<ul>
<li>サーバインスタンスから、IP 設定くらいまで</li>
<li>ようは、外部サービス(AWSみたいな)で、API 操作して決められるものを resource として扱ってる感じ</li>
</ul>
</li>
<li>provisioning

<ul>
<li>上のresourceに入らない設定</li>
<li>ansibleとかchefとか、はたまたスクリプト実行して設定するような設定</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>設定を書いて、実行する前に、実行計画が確認できる

<ul>
<li>つまーり、ちゃんと何が起きるかを確認してから実行できる</li>
<li>しかもグラフィカルに依存性をチェックできる</li>
<li>これは便利</li>
</ul>
</li>
<li>実行後、実際の状態がどうなっているか、もコマンドで確認できる</li>
</ul>


<p>こんなことをできますよ、と。</p>

<p>これだけ見ると、この前ブログに書いてた、Vagrant と何が違うんだろうね・・・
って感じになるわけです。</p>

<h2>Terraform と Vagrant の違い</h2>

<p>そのままだけど。何が違うんだろうね、と思ったので、まとめてみましたよ。
勘違いしてるところは、誰か教えて。</p>

<table>
<thead>
<tr>
<th align="center">items</th>
<th align="left"> Vagrant  </th>
<th align="left"> Terraform </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Catch copy </td>
<td align="left"> Development environments made easy </td>
<td align="left"> Terraform is a tool for building, changing, and combining infrastructure safely and efficiently.</td>
</tr>
<tr>
<td align="center">Provider </td>
<td align="left"> VirtualBox </td>
<td align="left"> AWS</td>
</tr>
<tr>
<td align="center">         </td>
<td align="left"> VMware     </td>
<td align="left"> CloudFlare</td>
</tr>
<tr>
<td align="center">         </td>
<td align="left"> Docker     </td>
<td align="left"> Consul</td>
</tr>
<tr>
<td align="center">         </td>
<td align="left"> KVM        </td>
<td align="left"> DigitalOcean</td>
</tr>
<tr>
<td align="center">         </td>
<td align="left"> Hyper-V    </td>
<td align="left"> DNSimple</td>
</tr>
<tr>
<td align="center">         </td>
<td align="left"> AWS        </td>
<td align="left"> Heroku</td>
</tr>
<tr>
<td align="center">         </td>
<td align="left"> RackSpace  </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">Provisioning </td>
<td align="left"> File Upload      </td>
<td align="left"> たぶんなんでもござれ</td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> script execution </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> Ansible          </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> CFengine         </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> Chef Solo        </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> Chef Client      </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> Docker           </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> Puppet Apply     </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> Puppet Agent     </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">             </td>
<td align="left"> Salt             </td>
<td align="left"> </td>
</tr>
<tr>
<td align="center">Others </td>
<td align="left"> Destroy が結構気軽に実行できる(実行までのステップが超短い！) </td>
<td align="left"> Destroy を間違えて実行する確率は、Vagrant に比べたら相当低い</td>
</tr>
<tr>
<td align="center">       </td>
<td align="left"> 統合的な管理はできない(Load balancer/DNS/Storege等の管理は現状できない) </td>
<td align="left"> AWS は、ELB/RDS/EIP/EC2/VPC/Route53/S3/Security Groupなどなど、結構いじれるので、かなり統合的管理ができる</td>
</tr>
<tr>
<td align="center">       </td>
<td align="left"> 元々の思想が、開発環境/サンドボックス環境構築用のツール </td>
<td align="left"> 特に開発環境用、とは銘打ってないから本番用なんだ、きっと</td>
</tr>
<tr>
<td align="center">       </td>
<td align="left"> インフラ環境をコードで記述して、Build &amp; Scrap しまくれて、すげー便利 </td>
<td align="left"> インフラ環境を設定で記述して、構築できるので便利(destroy はVagrantのほうが気軽)</td>
</tr>
</tbody>
</table>


<p>こんな感じなのかなぁ。<br/>
Terraform に関しては、ちょっと作業フローも付け加えておこうかな。
きっとこんな感じになるんじゃないかなぁ、ってレベルなので、実際はわからんけど。</p>

<ul>
<li>たぶん作業フローが

<ul>
<li>設定ファイルを書く</li>
<li>実行プランを確認する</li>
<li>実行する</li>
<li>実行結果を確認する</li>
</ul>
</li>
</ul>


<p>になるので、Vagrant よりも、いちいち確認するために止まる箇所をコマンドベースで置いてるのが違う気がする</p>

<p>という感じで、Terraform vs Vagrant だと、</p>

<ul>
<li>そもそも最初の思想が違ってたり、</li>
<li>環境破壊の容易さが違ったり、</li>
<li>作業フローもたぶん違ったり、</li>
<li>multi providerへの対応有無が違ったり、</li>
<li>統合管理できる/できないがあったり</li>
</ul>


<p>っていう違いがあるのかな。だとするとやっぱり、</p>

<ul>
<li>開発環境 == Vagrant</li>
<li>本番環境 == Terraform</li>
</ul>


<p>になるんだろうな。もちろん、VPS 1台使ってサービス展開する分には、ぶっちゃけどっちでもええわ。
たぶんちゃんと管理しとけば(してなくても)、Vagrant で運営できる。でもたぶんそのレベルは、Vagrant すら必要ない。</p>

<p>でかい環境が必要な場合とか、小さい環境が何個も必要な場合とかは、うまく使い分けるのがええだろね。
provisioning のステージングを Vagrant でやってみて、うまくいったら、それ commit して Terraform 環境で適用、みたいな。
でもterraformは、初期構築ツールで、運営開始後に全部実行することはないのかも？
その辺まだわからん。まぁとりあえず、CloudFormation の進化版になりうるやーつだ。やっと理解できたw</p>

<p>ではインストール。</p>

<h3>terraform インストール</h3>

<hr />

<p><a href="http://www.terraform.io/intro/getting-started/install.html">ここ</a>を参考にインストールしましょう。</p>

<ul>
<li>ダウンロード</li>
<li>展開</li>
<li>PATH 通す</li>
</ul>


<p>これが出来ない人は、これ以上進んでも理解できない可能性が高いので、やめといたほうがいいです。</p>

<p>インストール終わったら、動くかだけみてみる。
<code>
$ terraform version
Terraform v0.1.1
</code>
なるほど、僕が今回使うのは、v0.1.1 だそうです。</p>

<h3>terraform 使う時のざっくりフロー</h3>

<hr />

<p>まずは、登場用語リストとその説明から。</p>

<ul>
<li>.tf ファイル

<ul>
<li>設定ファイル。これにどんなインフラを構築するか設定する</li>
<li>terraformコマンド実行するディレクトリに入ってる、.tfファイルが全部読み込まれて実行される</li>
</ul>
</li>
<li>provider

<ul>
<li>インフラを構築する手段</li>
<li>aws なのか、heroku なのか、的な感じ</li>
</ul>
</li>
<li>resource

<ul>
<li>各Provider で設定できる項目のこと</li>
<li>aws だったら、eipとか、elbが一つのresource になってる</li>
</ul>
</li>
</ul>


<p>そして次は、実際 terraform 使うかー、ってなったら踏みそうな手順。
きっと、僕はこんな感じなんだろう。</p>

<ol>
<li>システム構成検討
これはそのまんま。まずはどんなシステム作りたいかを考えようよ。</li>
<li>tf ファイル記述
これもそのまんま。考えたシステム構成図に則って書くだけといえば書くだけ。</li>
<li><p>実行計画確認</p>

<p>下記コマンド実行。</p>

<p><code>
$ terraform plan
</code></p>

<p>で実行計画が表示されるので、OKかを確認する。</p></li>
<li><p>実行</p>

<p>計画が OK だったら、下記コマンドで実行。</p>

<p><code>
$ terraform apply
</code></p>

<p>実行、というより、適用のほうがしっくりくる。</p></li>
<li><p>結果確認</p>

<p>で、結果を下記コマンドで確認。</p>

<p><code>
$ terraform show hogehoge.tfstatus
</code></p></li>
</ol>


<p>ほむほむ。
なんとなくこんな感じなのね。</p>

<p>と、ここまで書いて、実際使おうかな、という段で、一旦 Provider の種類を
みてみよう、というわけで、公式ドキュメントに載ってるのをざっと表にしてみた。</p>

<table>
<thead>
<tr>
<th align="left">Service name</th>
<th align="center">Terraform name</th>
<th align="left">Attribute</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">AWS</td>
<td align="center">Basic</td>
<td align="left">aws_autoscaling_group</td>
</tr>
<tr>
<td align="left"></td>
<td align="center">RDS</td>
<td align="left">aws_db_instance</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_db_security_group</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_eip</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_elb</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_security_group</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_subnet</td>
</tr>
<tr>
<td align="left"></td>
<td align="center">EC2</td>
<td align="left">aws_instance</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_internet_gateway</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_launch_configuration</td>
</tr>
<tr>
<td align="left"></td>
<td align="center">Route53</td>
<td align="left">aws_route_table</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_route_table_association</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_route53_record</td>
</tr>
<tr>
<td align="left"></td>
<td align="center"></td>
<td align="left">aws_route53_zone</td>
</tr>
<tr>
<td align="left"></td>
<td align="center">S3</td>
<td align="left">aws_s3_bucket</td>
</tr>
<tr>
<td align="left"></td>
<td align="center">VPC</td>
<td align="left">aws_vpc</td>
</tr>
</tbody>
</table>


<p>な、なにぃ・・・EBS ないのかな・・・CloudFront ないのかな・・・。
残念だなぁ・・・ちょっと動作みてみるのめんどくさくなってきたなぁ・・・
などなど、色々と去来する思いもあり、今回はこの辺でやめて、Ansible に戻ろうかなー、
ってなりましたw</p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluentdのテスト環境をvagrantでセットアップしてみるべ(複数サーバ管理)]]></title>
    <link href="http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2/"/>
    <updated>2014-08-11T05:00:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2</id>
    <content type="html"><![CDATA[<p>こんにちは。前回の続きで、またVagrantのエントリ書いてる<a href="https://twitter.com/xengineer01">@xengineer01</a>です。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/logo_vagrant.png" alt="vagrant logo" /></p>

<h2>システム構成図</h2>

<hr />

<p>まずは今回作ろうとしてるシステムの構成図。</p>

<p>Appサーバのapacheのログを fluentd(HA) に投げて、postgres insertくらいを一旦の目処にしようかね。<br/>
最終的には、HTTP(RESTなのかは不明)で別apに投げるのと、S3でのバックアップ、くらいまでをやるか、
と思ってはいるけどどこまで書けるやら・・・。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/vagrant-multi-server01.png" alt="mul2ti server01" /></p>

<!-- more -->


<h2>前回のあらすじ</h2>

<p><a href="http://blog.branch4.pw/blog/2014/08/07/setup-test-environment-with-vagrant/">前回の記事</a>
は、下記あたりの流れをざっくり紹介しました。</p>

<ul>
<li>Vagrantってなんですか？</li>
<li>Vagrantのinstall</li>
<li>Vagrantfileの書き方</li>
<li>vagrantでソフトウェア関連設定</li>
<li>vagrantでサーバのハードウェアスペック指定</li>
</ul>


<p>前回は、サーバ１台の場合についてだったんで、今回は複数台管理する場合について。<br/>
この記事、本来の目的は、fluentdの検証をすることなんで、当然複数サーバあげたいわけで。</p>

<h2>概要</h2>

<hr />

<p>今回はたぶん、</p>

<p>1 Projectで複数サーバを管理する場合の、</p>

<ul>
<li>Vagrantfileの書き方</li>
<li>networkについて</li>
<li>provisioningについて</li>
<li>vagrant commandの使い方</li>
</ul>


<p>こんなところになる予定。</p>

<h2>各種バージョン</h2>

<hr />

<p>前回も書いたけど、このとおり。<br/>
今回は fluentdのバージョンも追記しておこう。</p>

<ul>
<li>vagrant version 1.6.3</li>
<li>Windows PC + VirtualBox 4.3.8r92456</li>
<li>MintLinux17 + VirtualBox 4.3 ?</li>
<li>MacOSX(Mavericks) + VirtualBox 4.3.14r95030</li>
</ul>


<h2>Vagrantfile複数サーバ対応</h2>

<hr />

<h3>１台のときは？</h3>

<p>何はなくとも予習と復習は大切です。<br/>
なので、前回の復習から。単体のサーバの場合の Vagrantfile はこんな感じでした。</p>

<p>```
$ cat Vagrantfile
VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;hashicorp/precise64&rdquo;
  config.vm.hostname = &ldquo;testserver&rdquo;
  config.vm.network &ldquo;public_network&rdquo;, bridge: &lsquo;en0: Wi-Fi (AirPort)&rsquo;
  config.vm.provision :shell, path: &ldquo;bootstrap.sh&rdquo;</p>

<p>  config.vm.provider :virtualbox do |v|</p>

<pre><code>v.customize ["modifyvm", :id, "--memory", "512"]
v.customize ["modifyvm", :id, "--cpus", "1"]
</code></pre>

<p>  end
end
```</p>

<p>ほむほむ。思い出しました。</p>

<h3>複数台のときは？</h3>

<p>では、引き続き複数の場合はどうすりゃいいんかね・・・ vagrant の公式 website を物色。</p>

<p><a href="https://docs.vagrantup.com/v2/multi-machine/index.html">ここ</a>ですよ。ドンピシャ。
ではこれを参考に、システム構成図ぽく書いてみると・・・</p>

<p>```
$ cat Vagrantfile</p>

<h1>&ndash;<em>&ndash; mode: ruby &ndash;</em>&ndash;</h1>

<h1>vi: set ft=ruby :</h1>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|</p>

<p>  config.vm.define &ldquo;ap_server01&rdquo; do |ap_server01|</p>

<pre><code>ap_server01.vm.box = "hashicorp/precise64"
ap_server01.vm.hostname = "apserver01"
ap_server01.vm.network "public_network", bridge: 'en0: Wi-Fi (AirPort)'
ap_server01.vm.provision :shell, path: "bootstrap.sh"

ap_server01.vm.provider :virtualbox do |v|
  v.customize ["modifyvm", :id, "--memory", "384"]
  v.customize ["modifyvm", :id, "--cpus", "1"]
end
</code></pre>

<p>  end</p>

<p>  config.vm.define &ldquo;ap_server02&rdquo; do |ap_server02|</p>

<pre><code>ap_server02.vm.box = "hashicorp/precise64"
ap_server02.vm.hostname = "apserver02"
ap_server02.vm.network "public_network", bridge: 'en0: Wi-Fi (AirPort)'
ap_server02.vm.provision :shell, path: "bootstrap.sh"

ap_server02.vm.provider :virtualbox do |v|
  v.customize ["modifyvm", :id, "--memory", "384"]
  v.customize ["modifyvm", :id, "--cpus", "1"]
end
</code></pre>

<p>  end</p>

<p>  config.vm.define &ldquo;fluentd01&rdquo; do |fluentd01|</p>

<pre><code>fluentd01.vm.box = "hashicorp/precise64"
fluentd01.vm.hostname = "fluentd01"
fluentd01.vm.network "public_network", bridge: 'en0: Wi-Fi (AirPort)'
fluentd01.vm.provision :shell, path: "bootstrap.sh"

fluentd01.vm.provider :virtualbox do |v|
  v.customize ["modifyvm", :id, "--memory", "384"]
  v.customize ["modifyvm", :id, "--cpus", "1"]
end
</code></pre>

<p>  end</p>

<p>  config.vm.define &ldquo;fluentd02&rdquo; do |fluentd02|</p>

<pre><code>fluentd02.vm.box = "hashicorp/precise64"
fluentd02.vm.hostname = "fluentd02"
fluentd02.vm.network "public_network", bridge: 'en0: Wi-Fi (AirPort)'
fluentd02.vm.provision :shell, path: "bootstrap.sh"

fluentd02.vm.provider :virtualbox do |v|
  v.customize ["modifyvm", :id, "--memory", "384"]
  v.customize ["modifyvm", :id, "--cpus", "1"]
end
</code></pre>

<p>  end</p>

<p>  config.vm.define &ldquo;postgres&rdquo; do |postgres|</p>

<pre><code>postgres.vm.box = "hashicorp/precise64"
postgres.vm.hostname = "postgres"
postgres.vm.network "public_network", bridge: 'en0: Wi-Fi (AirPort)'
postgres.vm.provision :shell, path: "bootstrap.sh"

postgres.vm.provider :virtualbox do |v|
  v.customize ["modifyvm", :id, "--memory", "384"]
  v.customize ["modifyvm", :id, "--cpus", "1"]
end
</code></pre>

<p>  end
end
```</p>

<p>な、、、ながいすな・・・これはさすがに短くできる予感しかしないけども、
一旦起動するかどうか確認をば・・・</p>

<p><code>
$ vagrant up
</code></p>

<p>ってうつと・・・おお、、、起動した。結構時間かかった。
あと今更だけど、network &ldquo;public_network"ってどういう IP 振られてるんだろう？</p>

<p>ログインして確認しよう。ぬ、複数サーバあがってるときに、vagrant ssh つっても、
どのサーバに ssh するかわからんだろ・・・とりあえずやってみる。</p>

<p><code>
$ vagrant ssh
This command requires a specific VM name to target in a multi-VM environment.
</code></p>

<p>あ、、、やっぱり怒られるのね・・・。どうやら引数に、ssh したいサーバの識別子渡すそうです。</p>

<p>config.vm.define &ldquo;ap_server01&rdquo; do |ap_server01| &lt;&ndash; &ldquo;ここの中の文字列&rdquo;</p>

<p>```
$ vagrant ssh ap_server01
Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a>
Welcome to your Vagrant-built virtual machine.
Last login: Fri Sep 14 06:23:18 2012 from 10.0.2.2
vagrant@apserver01:~$ /sbin/ip a
1: lo: &lt;LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN
 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
 inet 127.0.0.1/8 scope host lo
 inet6 ::1/128 scope host
    valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
 link/ether 08:00:27:88:0c:a6 brd ff:ff:ff:ff:ff:ff
 inet 10.0.2.15/24 brd 10.0.2.255 scope global eth0
 inet6 fe80::a00:27ff:fe88:ca6/64 scope link
    valid_lft forever preferred_lft forever
3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
 link/ether 08:00:27:01:26:5a brd ff:ff:ff:ff:ff:ff
 inet 172.16.17.10/24 brd 172.16.17.255 scope global eth1
 inet6 2408:27:bfff:28d:411a:c61a:be37:db7c/64 scope global temporary dynamic
    valid_lft 604272sec preferred_lft 85272sec
 inet6 2408:27:bfff:28d:a00:27ff:fe01:265a/64 scope global dynamic
    valid_lft 2591957sec preferred_lft 604757sec
 inet6 fe80::a00:27ff:fe01:265a/64 scope link
    valid_lft forever preferred_lft forever
vagrant@apserver01:~$ logout
Connection to 127.0.0.1 closed.
```</li>
</ul>


<p>IP は、そうか、うちの自宅内の DHCP が振られてるのね。
検証環境には、完全 Private振りたいので、あとで変更しよっと。
その前に、Vagrantfile の簡略化をしてみよう。これは長過ぎる・・・</p>

<h3>Vagrantfile 短く！</h3>

<p>さて、どうしたものか、まずはぐぐってみる。</p>

<p><em>&ldquo;vagrantfile 簡略化&rdquo;</em></p>

<p>はそれっぽいのがヒットせず。</p>

<p><em>&ldquo;vagrantfile 複数&rdquo;</em></p>

<p>で、<a href="http://nmbr8.com/blog/2014/05/22/how-to-define-and-control-multiple-guest-machines-per-Vagrantfile/">こんな記事</a>が。
これだ！ruby で書けばいいからこう書けるのね。</p>

<p>```
$ cat Vagrantfile</p>

<h1>&ndash;<em>&ndash; mode: ruby &ndash;</em>&ndash;</h1>

<h1>vi: set ft=ruby :</h1>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.provision :shell, path: &ldquo;bootstrap/all.sh&rdquo;             #1</p>

<p>  not_dbs = { :apserver01 => &lsquo;192.168.101.1&rsquo;,</p>

<pre><code>          :apserver02 =&gt; '192.168.101.2',
          :fluentd01  =&gt; '192.168.102.1',
          :fluentd02  =&gt; '192.168.102.2'
          :postgres01 =&gt; '192.168.103.1'
        }                                                      #2
</code></pre>

<p>  not_dbs.each do |not_db_name, not_db_ip|                         #3</p>

<pre><code>config.vm.define not_db_name do |server_config|
  bootstrap_path = "bootstrap/#{not_db_name}.sh"
  server_config.vm.box = "hashicorp/precise64"
  server_config.vm.hostname = not_db_name.to_s
  server_config.vm.network "private_network", ip: not_db_ip    #4
  server_config.vm.provision :shell, path: bootstrap_path

  server_config.vm.provider :virtualbox do |v|
    v.customize ["modifyvm", :id, "--memory", "384"]
    v.customize ["modifyvm", :id, "--cpus", "1"]
  end
end
</code></pre>

<p>  end
end
```</p>

<p>なんかまとまってる感あり！
行末に、コメントで番号付けてるとこを軽く説明しておこうかな。</p>

<ul>
<li>config.vm.provision :shell, path: &ldquo;bootstrap/all.sh&rdquo;

<ul>
<li>あれだわ。全部のサーバで実行する provisioning の shell を指定してます</li>
<li>これとは別に、各サーバ毎に実行する shell もループ中で指定しております</li>
</ul>
</li>
<li>not_dbs = { :apserver01 => &lsquo;192.168.101.1&rsquo;, &hellip; }

<ul>
<li>共通化してループにしてみた(not_dbs のネーミングは・・・最初 DB 以外にしてたから。最終的にまとめちゃった)</li>
</ul>
</li>
<li>not_dbs.each do |not_db_name, not_db_ip|

<ul>
<li>そのループ。中の処理はみればわかる</li>
</ul>
</li>
<li>server_config.vm.network &ldquo;private_network&rdquo;, ip: not_db_ip

<ul>
<li>networkはね、今回はプライベートにしました。IP も指定で</li>
</ul>
</li>
</ul>


<p>結構簡略化できてると思うけどどうでしょう。
次は、provisioning 用の shellを覗いてみよう。</p>

<p>shellは、apserver/fluentdは、複数台あるけど、今全部中身一緒なので、1台分だけみる。</p>

<h4>全部のサーバで実行されるやーつ</h4>

<p>```
$ cat bootstrap/all.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get update
apt-get install -y vim
apt-get install -y vim-common
```</p>

<h4>ap server でだけ実行されるやーつ</h4>

<p>```
$ cat bootstrap/apserver01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>/vagrant/bootstrap/apserver.sh
/vagrant/bootstrap/not_db.sh
```</p>

<h4>fluentd でだけ実行されるやーつ</h4>

<p>```
$ cat bootstrap/fluentd01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>/vagrant/bootstrap/not_db.sh</p>

<p>cat &lt;&lt; EOF > /etc/td-agent/td-agent.conf</p>

<h1>Input</h1>

<p><source>
  type forward
  port 24224
</source></p>

<h1>Output</h1>

<p><match apache.**>
  type file
  path /var/log/td-agent/out_apachelog
  time_slice_format %Y%m%d
  time_slice_wait 10m
  time_format %Y%m%dT%H%M%S%z
  compress gzip
  utc
</match>
EOF
```</p>

<h4>postgres でだけ実行されるやーつ</h4>

<p>```
$ cat bootstrap/postgres01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y postgresql
```</p>

<p>大体見ればわかると思うので、一個だけ説明。</p>

<p><code>
/vagrant/bootstrap/apserver.sh
/vagrant/bootstrap/not_db.sh
</code>
この二つだけ。</p>

<p>/vagrant っていうのは、Hostサーバでいうところの、PROJECT_ROOTのディレクトリなのです。<br/>
つまり、</p>

<p>PROJECT_ROOT/bootstrap/apserver.sh<br/>
PROJECT_ROOT/bootstrap/not_db.sh</p>

<p>をそれぞれ実行しろよ、と。
今回でいうと、apserverが一番実行される shell が多いのかな。</p>

<ol>
<li>まず、全体で、all.shを実行</li>
<li>次に、apserver01.sh に書いてある何かを実行(今回は実は中身ほとんどないんだけど)</li>
<li>で、bootstrap/apserver.sh と bootstrap/not_db.sh を実行</li>
</ol>


<p>なるほど。こんな感じにすれば、共通化もできるのねん。一旦、簡略化はこんなもんかな。</p>

<p>apserver.sh と not_db.sh については、下記内容が書いてありますよ。</p>

<p>```
$ cat bootstrap/apserver.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y apache2
rm -rf /var/www
ln -fs /vagrant /var/www</p>

<p>chmod o+x /var/log/apache2/
chmod o+r /var/log/apache2/access.log</p>

<p>cat &lt;&lt; EOF > /etc/td-agent/td-agent.conf</p>

<h1>tail input</h1>

<p><source>
  type tail
  path /var/log/apache2/access.log
  pos_file /var/log/td-agent/tmp/httpd-access.log.pos
  tag apache.access
  format apache2
</source></p>

<h1>Log Forwarding</h1>

<p><match apache.**>
  type forward</p>

<p>  # primary host
  <server></p>

<pre><code>host 192.168.102.1
port 24224
</code></pre>

<p>  </server>
  # use secondary host
  <server></p>

<pre><code>host 192.168.102.2
port 24224
standby
</code></pre>

<p>  </server></p>

<p>  # use longer flush_interval to reduce CPU usage.
  # note that this is a trade-off against latency.
  flush_interval 60s
</match>
EOF
```</p>

<p>```
$ cat bootstrap/not_db.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y curl
curl -L <a href="http://toolbelt.treasuredata.com/sh/install-ubuntu-precise.sh">http://toolbelt.treasuredata.com/sh/install-ubuntu-precise.sh</a> | sh</p>

<p>mkdir /var/log/td-agent/tmp/
chown td-agent. /var/log/td-agent/tmp
```</p>

<h4>apserver.shの内容</h4>

<p>見ればわかるけど、apache インストールと、fluentd の HA 設定してるくらい。</p>

<h4>not_db.shの内容</h4>

<p>ほぼ fluentd インストールしてるだけ。</p>

<h3>Network について</h3>

<p>network は、public/private で書き方だけわかったからいいや。</p>

<h4>public(DHCP)</h4>

<p>config.vm.network &ldquo;public_network&rdquo;, bridge: &lsquo;en0: Wi-Fi (AirPort)&rsquo;</p>

<h4>private(static)</h4>

<p>config.vm.network &ldquo;private_network&rdquo;, ip: &lsquo;IP address&rsquo;</p>

<p>たぶん、private で DHCP 振りたい場合は、ip: 以降削ればいける。</p>

<h3>Provisioning について</h3>

<p>shell でも、ここまで共通化したり、分けたりできれば結構楽にはいけると思うけど、
そもそも、shell でやってるのはいかがなものか、という意見は認める。なので次は、ansible やろうかな。</p>

<h3>vagrant command について</h3>

<p>リストアップ＆説明。でも説明は、公式サイトから抜粋しただけ。</p>

<h4>今のところよく使いそうなやーつ</h4>

<ul>
<li>halt

<ul>
<li>stops the vagrant machine</li>
</ul>
</li>
<li>help

<ul>
<li>shows the help for a subcommand</li>
</ul>
</li>
<li>provision

<ul>
<li>provisions the vagrant machine</li>
</ul>
</li>
<li>reload

<ul>
<li>restarts vagrant machine, loads new Vagrantfile configuration</li>
</ul>
</li>
<li>ssh

<ul>
<li>connects to machine via SSH</li>
</ul>
</li>
<li>status

<ul>
<li>outputs status of the vagrant machine</li>
<li>起動してるサーバのリストをみれるので、ちょいちょい使う</li>
<li>statusみて、どのサーバに ssh するか決めて、みたいな</li>
</ul>
</li>
<li>up

<ul>
<li>starts and provisions the vagrant environment</li>
</ul>
</li>
</ul>


<h4>その次に使いそうなやーつ</h4>

<ul>
<li>init

<ul>
<li>initializes a new Vagrant environment by creating a Vagrantfile</li>
</ul>
</li>
<li>destroy

<ul>
<li>stops and deletes all traces of the vagrant machine</li>
</ul>
</li>
<li>resume

<ul>
<li>resume a suspended vagrant machine</li>
</ul>
</li>
<li>suspend

<ul>
<li>suspends the machine</li>
</ul>
</li>
</ul>


<h4>たまーに使うかもねなやーつ</h4>

<ul>
<li>login

<ul>
<li>log in to Vagrant Cloud</li>
</ul>
</li>
<li>share

<ul>
<li>share your Vagrant environment with anyone in the world</li>
</ul>
</li>
<li>plugin

<ul>
<li>manages plugins: install, uninstall, update, etc.</li>
</ul>
</li>
<li>global-status

<ul>
<li>outputs status Vagrant environments for this user</li>
</ul>
</li>
</ul>


<h4>そんなに使わなそうねなやーつ(box/packageあたりは、box 自作するようになると使うかな)</h4>

<ul>
<li>box

<ul>
<li>manages boxes: installation, removal, etc.</li>
</ul>
</li>
<li>connect

<ul>
<li>connect to a remotely shared Vagrant environment</li>
</ul>
</li>
<li>package

<ul>
<li>packages a running vagrant environment into a box</li>
</ul>
</li>
<li>rdp

<ul>
<li>connects to machine via RDP</li>
</ul>
</li>
<li>ssh-config

<ul>
<li>outputs OpenSSH valid configuration to connect to the machine</li>
</ul>
</li>
<li>version

<ul>
<li>prints current and latest Vagrant version</li>
</ul>
</li>
</ul>


<h3>おわりに</h3>

<p>はい、postgresに突っ込むところまではいきませんでした。
なぜならpostgres使ったことなくてちょっとめんどくさくなったから。</p>

<p>なので、現状だと、apache の log を tail で引っ張ってきて、fluentd01/02にファイル出力する、 まで。
次はどこまでいけるかな・・・</p>

<h2>次回予告</h2>

<p>ansible 使った provisioning 。</p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluentdのテスト環境をvagrantでセットアップしてみるべ]]></title>
    <link href="http://blog.branch4.pw/blog/2014/08/07/setup-test-environment-with-vagrant/"/>
    <updated>2014-08-07T22:00:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/08/07/setup-test-environment-with-vagrant</id>
    <content type="html"><![CDATA[<p>こんにちは。Vagrant使ってみよ。と思った<a href="https://twitter.com/xengineer01">@xengineer01</a>です。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/logo_vagrant.png" alt="vagrant logo" /></p>

<h2>概要</h2>

<hr />

<p>まぁ使ってみたかっただけです。<br/>
fluentdの検証するし、今後も環境構築は何回もするし、ついでだから vagrant使ってみよ、<br/>
なノリです。</p>

<p>実際は、今回のエントリーでは fluentd の環境構築までいかなかったので、何回かに分けて書きますわ。</p>

<h2>vagrantって？</h2>

<hr />

<p>どこでも同じ環境を寸分違わず再現できるセットアップツール、って感じなのかな。<br/>
boxつくって、設定ファイル書いとけば、どこに持ってっても同じ環境が作れて、<br/>
問題の再現とかもしやすい、ということです。便利だわー。<br/>
今回は、数年ぶりに環境構築する用事があったので、使おうと思ったり。</p>

<!-- more -->


<h2>インストール</h2>

<hr />

<p><a href="http://www.vagrantup.com/downloads">こちら</a>からダウンロードしてインストール。<br/>
簡単だから。ただし、ツール自体にGUIはないのでCLIに抵抗がある人はここでおかえりいただきます。</p>

<h2>セットアップ</h2>

<hr />

<p>まずは、<a href="http://www.vagrantup.com/">公式サイト</a>のドキュメンツを辿ってみるべし。<br/>
Getting Startedを一通りやれば結構わかる。</p>

<h2>諸情報</h2>

<p>今回使ったのは、</p>

<ul>
<li>vagrant version 1.6.3</li>
<li>Windows PC + VirtualBox 4.3.8r92456</li>
<li>MintLinux17 + VirtualBox 4.3 ?</li>
<li>MacOSX(Mavericks) + VirtualBox 4.3 ?</li>
</ul>


<p>でございます。作った Vagrantfile 含めた設定は、全環境でちゃんと動いてるぽかったです。</p>

<h3>Vagrantfile なる設定ファイルが肝</h3>

<p>設定ファイルのこと。</p>

<ul>
<li>1つのプロジェクトあたり、1つ存在する。</li>
<li>プロジェクト内に、どんなサーバが何台存在しているか</li>
<li>ネットワーク構成どんな感じか</li>
<li>各サーバに何インストールしとくか、設定どうなってるか</li>
</ul>


<p>などなど定義します。たぶん、流れ的には、</p>

<ul>
<li>Vagrantfileの書き方覚える</li>
<li>Provisioningツールの使い方覚える or 既に覚えてれば不要</li>
<li>Provider(VirtualBox/KVM/Docker etc&hellip;)の使い分け的なものを覚える</li>
<li>Boxの作り方覚える</li>
</ul>


<p>この辺を覚えていくんでしょう。</p>

<h3>Projectディレクトリと、Vagrantfile を作る！</h3>

<p>下記コマンドを実行してね。<br/>
(本Entryでは、以降Projectのルートディレクトリは、PROJECT_ROOTとします)
<code>``
$ mkdir &lt;PROJECT_ROOT&gt;
$ cd &lt;PROJECT_ROOT&gt;
$ vagrant init
A</code>Vagrantfile<code>has been placed in this directory. You are now
ready to</code>vagrant up<code>your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
</code>vagrantup.com` for more information on using Vagrant.</p>

<p>```</p>

<p>やってることは、</p>

<ol>
<li>Projectディレクトリを作成</li>
<li>Projectディレクトリに移動</li>
<li>Projectを初期化(Vagrantfileが生成される)</li>
</ol>


<p>でございます。コマンドで生成された Vagrantfileから、コメントの行を消すと、、、</p>

<p>```
$ cat Vagrantfile</p>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;base&rdquo;
end
```
こんな感じ。APIのバージョンは、"2" のようです。<br/>
config.vm.box = &ldquo;base"は、よくわからないけど、今はいいや。<br/>
Vagrantfile は、git,svn等の、VCSにcommitすべきものらしいので、commit。</p>

<h3>Box とは？</h3>

<p>生成された、Vagrantfile中にも出てくるけど、Boxとは？<br/>
Vagrant では、box っていうのが、ひとつのベースイメージになるんだと。<br/>
仮想イメージの呼び方をVagrant風に言うと &ldquo;Box&rdquo; なのです。</p>

<h3>Box のインストール</h3>

<p>まずは、自分のマシンに、Box(仮想イメージ)を追加します。<br/>
下記コマンドを、実行。</p>

<p>```
$ vagrant box add hashicorp/precise64
==> box: Loading metadata for box &lsquo;hashicorp/precise64&rsquo;</p>

<pre><code>box: URL: https://vagrantcloud.com/hashicorp/precise64
This box can work with multiple providers! The providers that it
can work with are listed below. Please review the list and choose
the provider you will be working with.

1) hyperv
2) virtualbox
3) vmware_fusion

Enter your choice: 2

==&gt; box: Adding box 'hashicorp/precise64' (v1.1.0) for provider: virtualbox
    box: Downloading: https://vagrantcloud.com/hashicorp/precise64/version/2/provider/virtualbox.box
    ==&gt; box: Successfully added box 'hashicorp/precise64' (v1.1.0) for 'virtualbox'!
</code></pre>

<p>```</p>

<p>今回使用してる、hashicorp さん謹製の box、precise64 は、</p>

<ul>
<li>hyperv</li>
<li>virtualbox</li>
<li>vmware_fusion</li>
</ul>


<p>に対応してるみたいだけど、2番の virtualbox を選択。<br/>
そうすると、下記ディレクトリ配下に、VirtualBox のイメージがダウンロードされたり、<br/>
Vagrantfileのような諸情報が格納されます。(結構時間かかる)</p>

<p>${HOME}/.vagrant.d<br/>
${HOME}/.vagrant.d/boxes<br/>
${HOME}/.vagrant.d/data<br/>
${HOME}/.vagrant.d/gems<br/>
${HOME}/.vagrant.d/rgloader<br/>
${HOME}/.vagrant.d/tmp</p>

<p>たぶん大事なのは、boxes 配下なのかな？きっとそうだろう。<br/>
イメージのダウンロード元は、<a href="https://vagrantcloud.com/">ここ</a>からみたい。</p>

<p>初期化完了した状態で、</p>

<p><code>
$ vagrant up
</code>
実行すると、今追加したほやほやのboxがすぐ起動。<br/>
ただ、諸々未設定なので、一旦落として設定しましょ。</p>

<ul>
<li>ネットワーク設定</li>
<li>ホスト名の設定</li>
<li>起動時にインストールするアプリがあるのかどうか</li>
</ul>


<p>などなど、設定していきます。<br/>
まずは、停止。</p>

<p><code>
$ vagrant destroy
</code></p>

<h3>Vagrantfile設定</h3>

<p>設定自体は、初期化時に生成された、Vagrantfileを編集していく。</p>

<p>Vagrantfile では、下記なんかを定義できる</p>

<ul>
<li>起動するマシンスペック</li>
<li>インストールするアプリケーション</li>
<li>どうやってアクセスするか</li>
</ul>


<p>今回は、こんなマシンにしようかな。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/guestserver01.png" alt="guestserver" /></p>

<ul>
<li>CPU x 1 個</li>
<li>Memory 512 MB</li>
<li>HDD 15 GB</li>
<li>Ubuntu12.04</li>
<li>Network(DHCP/public)</li>
<li>hostname: testserver</li>
<li>apache pre-install</li>
</ul>


<p><a href="http://docs.vagrantup.com/v2/getting-started/index.html">ここ</a>とか、
<a href="http://docs.vagrantup.com/v2/virtualbox/configuration.html">ここ</a>を参照して、書いていく。<br/>
ハードのスペック関連は、VirtualBoxのAPI経由なので、<a href="http://www.virtualbox.org/manual/ch08.html">ここ</a>
からやりたいことを探すんだーね。<br/>
そして出来上がったVagrantfile。(まだスペック関連入れてない版)
```
$ cat Vagrantfile</p>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;hashicorp/precise64&rdquo;
  config.vm.hostname = &ldquo;testserver&rdquo;
  config.vm.network &ldquo;public_network&rdquo;
  config.vm.provision :shell, path: &ldquo;bootstrap.sh&rdquo;
end
```
順番に説明。</p>

<h4>config.vm.box = &ldquo;hashicorp/precise64&rdquo;</h4>

<p>このBoxは、このイメージですよ！と、いうこと。</p>

<h4>config.vm.hostname = &ldquo;testserver&rdquo;</h4>

<p>Host名は、testserverですよ！と、いうこと。</p>

<h4>config.vm.network &ldquo;public_network&rdquo;</h4>

<p>Public、といっても、グローバルIPが必ず振られるわけではない。<br/>
たぶん、下記環境だったらグローバルが来るんじゃないか？</p>

<ul>
<li>Network IF が 1 つ</li>
<li>DHCP でグローバルが割り当てられる</li>
</ul>


<p>VirtualBox では、NAT になる。</p>

<p>Network IF が複数ある場合は、こんな感じに指定するそうな。
<code>
config.vm.network "public_network", bridge: 'en1: Wi-Fi(AirPort)'
</code></p>

<h4>config.vm.provision :shell, path: bootstrap.sh</h4>

<p>ゲストサーバ起動時に、PROJECT_ROOT/bootstrap.sh を実行しろ、ということ。<br/>
なので、ここに、</p>

<p>```</p>

<h1>!/usr/bin/evn bash</h1>

<p>apt-get update
apt-get install -y apache2
```</p>

<p>って書いておくと、起動時に、apache2 が入った状態になります。<br/>
さて、準備は整ったはずなので、いざ起動！！</p>

<p>```
$ vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Importing base box &lsquo;hashicorp/precise64&rsquo;&hellip;
==> default: Matching MAC address for NAT networking&hellip;
==> default: Checking if box &lsquo;hashicorp/precise64&rsquo; is up to date&hellip;
==> default: Setting the name of the VM: project_blog_default_1407340802923_76317
==> default: Fixed port collision for 22 => 2222. Now on port 2204.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Available bridged network interfaces:
1) en0: Wi-Fi (AirPort)
2) en1: Thunderbolt 1
3) en2: Thunderbolt 2
4) bridge0
5) p2p0</p>

<p>```
あ、NIC だけじゃなくて色々あるから指定しないとだめなんですね・・・<br/>
一旦とめて、Vagrantfile を編集。</p>

<p>```
$ cat Vagrantfile</p>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;hashicorp/precise64&rdquo;
  config.vm.hostname = &ldquo;testserver&rdquo;
  config.vm.network &ldquo;public_network&rdquo;
  config.vm.network &ldquo;public_network&rdquo;, bridge: &lsquo;en0: Wi-Fi (AirPort)&rsquo;
  config.vm.provision :shell, path: &ldquo;bootstrap.sh&rdquo;
end
```</p>

<p>気を取り直して、再度実行。</p>

<p>```
$ vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Checking if box &lsquo;hashicorp/precise64&rsquo; is up to date&hellip;
==> default: Fixed port collision for 22 => 2222. Now on port 2205.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
default: Adapter 2: bridged
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2205 (adapter 1)
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2205
default: SSH username: vagrant
default: SSH auth method: private key
</code></pre>

<p>==> default: Machine booted and ready!
==> default: Checking for guest additions in VM&hellip;</p>

<pre><code>default: The guest additions on this VM do not match the installed version of
default: VirtualBox! In most cases this is fine, but in rare cases it can
default: prevent things such as shared folders from working properly. If you see
default: shared folder errors, please make sure the guest additions within the
default: virtual machine match the version of VirtualBox you have installed on
default: your host and reload your VM.
default:
default: Guest Additions Version: 4.2.0
default: VirtualBox Version: 4.3
</code></pre>

<p>==> default: Setting hostname&hellip;
==> default: Configuring and enabling network interfaces&hellip;
==> default: Mounting shared folders&hellip;</p>

<pre><code>default: /vagrant =&gt; /Users/nemoto_hideaki/work/vagrant/project_blog
</code></pre>

<p>==> default: Running provisioner: shell&hellip;</p>

<pre><code>default: Running: /var/folders/kn/k_t_9_cs0yjd5q44m9w8b8wh0000gn/T/vagrant-shell20140807-3962-19neoc2.sh
</code></pre>

<p>==> default: stdin: is not a tty
==> default: bash: /tmp/vagrant-shell: /usr/bin/evn: bad interpreter: No such file or directory
The following SSH command responded with a non-zero exit status.
Vagrant assumes that this means the command failed!</p>

<p>chmod +x /tmp/vagrant-shell &amp;&amp; /tmp/vagrant-shell</p>

<p>Stdout from the command:</p>

<p>Stderr from the command:</p>

<p>stdin: is not a tty
bash: /tmp/vagrant-shell: /usr/bin/evn: bad interpreter: No such file or directory
```</p>

<p>はい、再度失敗orz<br/>
なんだなんだ・・・bootstrap.shを確認確認・・・</p>

<p>&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash</p>

<p>evn ね・・・修正いたしまして・・・
```
&#35;!/usr/bin/env bash</p>

<p>apt-get update
apt-get install -y apache2
```
修正して、再度実行。</p>

<p><code>
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==&gt; default: Checking if box 'hashicorp/precise64' is up to date...
==&gt; default: VirtualBox VM is already running.
</code>
あ、さっき実行してるから実行中なのか。もしかして今回は bootstrap.sh が実行されてないかも。<br/>
なので、下記コマンドどっちかで強制実行。</p>

<p><code>
$ vagrant reload --provision
$ vagrant provision
</code></p>

<p>違いは、stdoutみる限り、たぶん・・・</p>

<h4>$ vagrant reload &mdash;provision</h4>

<p>こっちは一旦マシン再起動かけてからの強制実行。</p>

<h4>$ vagrant provision</h4>

<p>こっちは起動したままbootstrap.shだけ強制実行。</p>

<p>どっちか実行すると、ちゃんと apache がインストールされます。</p>

<h3>ログイン！</h3>

<p>次は実際にログインアクセスしますよと。
```
$ vagrant ssh
Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a>
Welcome to your Vagrant-built virtual machine.
Last login: Fri Sep 14 06:23:18 2012 from 10.0.2.2
vagrant@testserver:~$
```</li>
</ul>


<p>おーいえす。ちゃんとホスト名も設定されてる。</p>

<p>ちなみに起動時の標準出力じっくりみると色々わかるんだけど、起動時に、guestのssh port(22)と、<br/>
hostの何番かを紐づけてくれてるので、そこにアクセスしてもいいのかも。<br/>
```
Hideaki-no-MacBook-Pro:project_blog nemoto_hideaki$ vagrant reload &mdash;provision
==> default: Attempting graceful shutdown of VM&hellip;
==> default: Checking if box &lsquo;hashicorp/precise64&rsquo; is up to date&hellip;
==> default: Clearing any previously set forwarded ports&hellip;
==> default: Fixed port collision for 22 => 2222. Now on port 2204.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
default: Adapter 2: bridged
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2204 (adapter 1) &lt;--ここ！！★
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2204
default: SSH username: vagrant
default: SSH auth method: private key
</code></pre>

<p>==> default: Machine booted and ready!
==> default: Checking for guest additions in VM&hellip;
```</p>

<p>というわけで、localhostの 2204 番にアクセスしてみるも・・・
<code>
$ ssh -p 2204 vagrant@127.0.0.1
vagrant@127.0.0.1's password:
</code>
private key 設定すればよさげだけど・・・どの key だ？面倒なんでパス。<br/>
つまり、こんな設定をして、vagrant up/vagrant ssh すればつながるよ！<br/>
という話でした。</p>

<p>はっ！マシンスペック！変えるんだった。とりあえず、default のままのスペックは下記。<br/>
```
$ cat /proc/cpuinfo | grep -E &lsquo;processor|model name&rsquo;
processor: 0
model name: Intel&reg; Core&trade; i5-4258U CPU @ 2.40GHz
processor: 1
model name: Intel&reg; Core&trade; i5-4258U CPU @ 2.40GHz</p>

<p>$ free -m</p>

<pre><code>         total       used       free     shared    buffers     cached
         Mem:           365        321         43          0         11        248
         -/+ buffers/cache:         61        303
         Swap:          767          0        767
</code></pre>

<p>$ df -h
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/precise64-root   79G  2.3G   73G   4% /
udev                        174M  4.0K  174M   1% /dev
tmpfs                        74M  288K   73M   1% /run
none                        5.0M     0  5.0M   0% /run/lock
none                        183M     0  183M   0% /run/shm
/dev/sda1                   228M   25M  192M  12% /boot
vagrant                     233G   92G  142G  40% /vagrant
```
CPU : 2個
Memory : 384MB
HDD : 80GB
(VirtualBox の GUI から引っ張って来てるスペック)</p>

<ul>
<li>CPU : 1個</li>
<li>Memory 512MB</li>
<li>HDD 15GB</li>
</ul>


<p>やることは、</p>

<ul>
<li>CPUを一個に減らす</li>
<li>Memoryを512MBに増やす</li>
<li>HDDを15GBに減らす</li>
</ul>


<p><a href="http://docs.vagrantup.com/v2/virtualbox/configuration.html">参考サイト１</a><br/>
<a href="http://www.virtualbox.org/manual/ch08.html">参考サイト２</a><br/>
上記２サイトを見比べた結果・・・
```
$ cat Vagrantfile
VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;hashicorp/precise64&rdquo;
  config.vm.hostname = &ldquo;testserver&rdquo;
  config.vm.network &ldquo;public_network&rdquo;, bridge: &lsquo;en0: Wi-Fi (AirPort)&rsquo;
  config.vm.provision :shell, path: &ldquo;bootstrap.sh&rdquo;</p>

<p>  # ここから下を追記した
  config.vm.provider :virtualbox do |v|</p>

<pre><code>v.customize ["modifyvm", :id, "--memory", "512"]
v.customize ["modifyvm", :id, "--cpus", "1"]
v.customize ["modifyhd", "b5fc9c57-f008-4118-a03f-e535f25deea4", "--resize", "1024"]
</code></pre>

<p>  end
end
<code>
こう。こんな感じでいけるはず。  
modifyhd の横の、"b5fc9c57-f008-4118-a03f-e535f25deea4"は、VirtualBox イメージのイメージファイルの UUID。  
下記コマンド実行すればみれるです。
</code>
$ VBoxManage list -l vms
Name:            project_blog_default_1407343357247_93821
Groups:          /
Guest OS:        Ubuntu (64 bit)
UUID:            7819729d-541f-47b8-8607-ec50965f4901
&hellip;
(中略)
&hellip;
SATA Controller (0, 0): /Users/nemoto_hideaki/VirtualBox VMs/project_blog_default_1407343357247_93821/box-disk1.vmdk (UUID: b5fc9c57-f008-4118-a03f-e535f25deea4) &lt;&mdash; これ！！
&hellip;
(中略)
&hellip;
```</p>

<p>よし！実行！
```
$ vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
&hellip;
(中略)
&hellip;
A customization command failed:</p>

<p>[&ldquo;modifyhd&rdquo;, &ldquo;b5fc9c57-f008-4118-a03f-e535f25deea4&rdquo;, &ldquo;&mdash;resize&rdquo;, &ldquo;1024&rdquo;]</p>

<p>The following error was experienced:</p>

<h1>&lt;Vagrant::Errors::VBoxManageError: There was an error while executing <code>VBoxManage</code>, a CLI used by Vagrant</h1>

<p>for controlling VirtualBox. The command and stderr is shown below.</p>

<p>Command: [&ldquo;modifyhd&rdquo;, &ldquo;b5fc9c57-f008-4118-a03f-e535f25deea4&rdquo;, &ldquo;&mdash;resize&rdquo;, &ldquo;1024&rdquo;]</p>

<p>Stderr: 0%&hellip;
Progress state: VBOX_E_NOT_SUPPORTED
VBoxManage: error: Resize hard disk operation for this format is not implemented yet!</p>

<blockquote></blockquote>

<p>Please fix this customization and try again.
```</p>

<p>はい、まただめ・・・orz<br/>
VBoxManage: error: Resize hard disk operation for this format is not implemented yet!<br/>
まだ実装してねーってよ。あきらめよう。</p>

<p>HDD の件を削って実行して、スペック確認した結果。
```
vagrant@testserver:~$ cat /proc/cpuinfo | grep -E &lsquo;processor|model name&rsquo;
processor   : 0
model name  : Intel&reg; Core&trade; i5-4258U CPU @ 2.40GHz
vagrant@testserver:~$ free -m</p>

<pre><code>         total       used       free     shared    buffers     cached
</code></pre>

<p>Mem:           491        338        153          0         15        260
&ndash;/+ buffers/cache:         61        429
Swap:          767          0        767
vagrant@testserver:~$ df -h
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/precise64-root   79G  2.3G   73G   4% /
udev                        237M  4.0K  237M   1% /dev
tmpfs                        99M  288K   99M   1% /run
none                        5.0M     0  5.0M   0% /run/lock
none                        246M     0  246M   0% /run/shm
/dev/sda1                   228M   25M  192M  12% /boot
vagrant                     233G   92G  142G  40% /vagrant
```</p>

<p>HDD リサイズとかは、たぶん Box 定義からいじる、とかなのかな？<br/>
その辺の深追いはまた今度。<br/>
まず今日の課題はクリアで。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/guestserver01_nohdd.png" alt="guestserver_hddstay" /></p>

<h2>次回予告</h2>

<p>複数サーバをぼこぼこあげるとき。</p>

<p>続きの複数サーバ編は
<a href="http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2/">ここ</a>だよ。</p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluentdを複数起動したい]]></title>
    <link href="http://blog.branch4.pw/blog/2014/07/22/multiprocess-with-fluentd/"/>
    <updated>2014-07-22T22:30:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/07/22/multiprocess-with-fluentd</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<hr />

<p>タイトル通りなんだけど、「fluentdを複数起動したいなー」<br/>
って、質問いただいたので、簡単に手順を書いておきまっせ。</p>

<h3>fluentdとは？</h3>

<hr />

<p>知らない人はいないね。はい。</p>

<p><a href="http://www.fluentd.org/"><img src="http://blog.branch4.pw/images/2014/07/fluentd-logo.png" alt="fluentd logo" /></a></p>

<p><a href="http://www.treasuredata.com">tresuredata</a>で開発されたオープンソースのデータコレクタですのん。<br/>
詳しいことは、<a href="http://www.fluentd.org/">fluentdのwebsite</a>にいけば大体書いてあるね。</p>

<p>この前行った、AWSSummit Tokyo2014でも、どの会社も、<br/>
「弊社では、ログはfluentdで処理しています！(ドヤ)」的な感じでした。<br/>
使うのが普通ですね、はい。</p>

<p>ちなみに僕はインストールするの今回初です(笑)<br/>
弊社では使ってるんですけどね、もう現場仕事から離れること・・・200X年くらい。</p>

<p>なのでね、今回の記事のイメージはこんな感じだけど、なんか間違って理解してたら誰か突っ込みよろ！</p>

<p><img src="http://blog.branch4.pw/images/2014/07/multiprocess.png" alt="multiprocess with fluentd" /></p>

<h3>前提</h3>

<hr />

<p>multiprocessといっても、</p>

<p><a href="https://github.com/frsyuki/fluent-plugin-multiprocess">こういうの</a><br/>
とか<br/>
<a href="http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin/">こういうの</a><br/>
とは違う意味で。</p>

<p>本当に、プロセスを別で起動したいんです！という話。<br/>
ようは、片方のプロセス止めるときに、もう一方は止めたくないんだよね、的なアレ。</p>

<!-- more -->


<p></p>

<h2>詳細</h2>

<hr />

<p>まず、fluentd自体、ubuntuだとprecise/lucidしかサポートしていないので、<br/>
binaryで入れたい方は対応osお使いください。</p>

<h3>fluentdに限らず</h3>

<hr />

<p>fluentdに限らずな話ではあるんですが、なにかしらのアプリを複数起動する、<br/>
ということ自体は、そんなに難しいことではないす。面倒な時はあるけど。</p>

<p>気をつけるのは、以下。</p>

<ul>
<li>IP address</li>
<li>port</li>
<li>other sharable resources(files/sockets)</li>
</ul>


<p>大体のアプリは、上記を専有して起動しちゃうので、それが被らないように<br/>
configをいじったりすれば概ね同時に起動して問題なす。</p>

<h3>fluentdの場合</h3>

<hr />

<p>で、fluentd@ubuntu(precise pangolin)の場合にどうやったかね、というお話。</p>

<p>まず、インストール後、今回触るファイルたちのリストは以下。</p>

<ul>
<li>/etc/init.d/td-agent</li>
<li>/etc/td-agent/td-agent.conf</li>
<li>/etc/default/td-agent</li>
</ul>


<p>それぞれ軽く解説をつけると・・・</p>

<ul>
<li>/etc/init.d/td-agent

<ul>
<li>fluentdの起動スクリプト</li>
<li>このファイルいじって、PIDファイルが被らないようにする</li>
</ul>
</li>
<li>/etc/td-agent/td-agent.conf

<ul>
<li>fluentdのconfigファイル</li>
<li>これの設定をいじって、portが被らないようにする</li>
</ul>
</li>
<li>/etc/default/td-agent

<ul>
<li>fluentdの起動オプション設定ファイル</li>
<li>これの設定をいじって、起動時に読み込むconfigを切り替える</li>
</ul>
</li>
</ul>


<p>こんな感じ。実際のところは上記の３ファイルをコピって、二つずつ作るのだ。がっはっは。</p>

<p>と、いうわけで、まずは各ファイルのコピーだけ作っておきましょ。</p>

<p><code>
% sudo cp /etc/init.d/td-agent /etc/init.d/td-agent_nginx
% sudo cp /etc/default/td-agent /etc/default/td-agent_nginx
% sudo cp /etc/td-agent/td-agent_nginx.conf /etc/td-agent/td-agent_nginx.conf
</code></p>

<p>suffinxにnginxっていれてるのは、特に意味はないす。<br/>
ただ、なんのためのfluentdなのか見分けつかなくなるようなファイル名はやめたほうがよいかと。</p>

<h3>各ファイルの詳細</h3>

<hr />

<h4>/etc/init.d/td-agent_nginx</h4>

<p>```</p>

<h1>Introduce the short server&rsquo;s name here</h1>

<p>NAME=td-agent_nginx ★ここ修正</p>

<h1>Read configuration variable file if it is present</h1>

<p>[ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME</p>

<h1>PATH should only include /usr/* if it runs after the mountnfs.sh script</h1>

<p>PATH=/sbin:/usr/sbin:/bin:/usr/bin
USER=td-agent                   # Running user
GROUP=td-agent                  # Running group
DESC=td-agent_nginx             # Introduce a short description here★ここ修正
PIDFILE=/var/run/$NAME/$NAME.pid
DAEMON=/usr/lib/fluent/ruby/bin/ruby # Introduce the server&rsquo;s location here</p>

<h1>Arguments to run the daemon with</h1>

<h1>DAEMON_ARGS=&ldquo;/usr/sbin/td-agent $DAEMON_ARGS &mdash;daemon $PIDFILE &mdash;log /var/log/td-agent/td-agent_nginx.log&rdquo; ★ここ修正</h1>

<p>DAEMON_ARGS=&ldquo;/usr/sbin/td-agent $DAEMON_ARGS $PIDFILE &mdash;log /var/log/td-agent/td-agent_nginx.log&rdquo; ★ここ修正
echo $DAEMON_ARGS
SCRIPTNAME=/etc/init.d/$NAME
START_STOP_DAEMON_ARGS=&ldquo;&rdquo;
```</p>

<h4>/etc/td-agent/td-agent_nginx.conf</h4>

<p>インストール直後のconfigっす。コメントは邪魔なのでとっぱらってます。</p>

<p>```</p>

<h3>#</h3>

<h2>Output descriptions:</h2>

<h1>#</h1>

<p><match td.*.*>
  type tdlog
  apikey YOUR_API_KEY</p>

<p>  auto_create_table
  buffer_type file
  buffer_path /var/log/td-agent_nginx/buffer/td ★ここ修正(同じログファイル握らないように)
</match></p>

<p><match debug.**>
  type stdout
</match></p>

<h3>#</h3>

<h2>Source descriptions:</h2>

<h1>#</h1>

<p><source>
  type forward
  port 25224 ★defaultだと24224になってるので、明示的に変更しておく
</source></p>

<h1>HTTP input</h1>

<p><source>
  type http
  port 18888 ★ここも明示的に変更しておく
</source></p>

<h2>live debugging agent</h2>

<p><source>
  type debug_agent
  bind 127.0.0.1
  port 25235 ★ここも明示的に変更しておく
</source>
```</p>

<h4>/etc/default/td-agent_nginx</h4>

<p>起動時につけるオプションね。<br/>
ここで読み込むconfig変更しますゆえお忘れなく。</p>

<p>```</p>

<h1>This file is sourced by /bin/sh from /etc/init.d/td-agent</h1>

<h1>Options to pass to td-agent</h1>

<p>DAEMON_ARGS=&ldquo;&mdash;config /etc/td-agent/td-agent_nginx.conf&rdquo; ★これ追記。違う設定ファイル読み込むように
```</p>

<p>このくらい修正をかけると、だ、下記コマンドで動くはず、だ。<br/>
<code>
% sudo /etc/init.d/td-agent start
% sudo /etc/init.d/td-agent_nginx start
% ps aux|grep td-agent
td-agent 11314  0.0  3.5  98888 17912 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --daemon /var/run/td-agent/td-agent.pid --log /var/log/td-agent/td-agent.log
td-agent 11317  2.4  5.2 125704 26260 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --daemon /var/run/td-agent/td-agent.pid --log /var/log/td-agent/td-agent.log
td-agent 11348  0.0  3.5  98888 17908 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --config /etc/td-agent/td-agent_nginx.conf --daemon /var/run/td-agent_nginx/td-agent_nginx.pid --log /var/log/td-agent/td-agent_nginx.log
td-agent 11351  5.5  5.2 125704 26224 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --config /etc/td-agent/td-agent_nginx.conf --daemon /var/run/td-agent_nginx/td-agent_nginx.pid --log /var/log/td-agent/td-agent_nginx.log
</code></p>

<p>ぱちぱちぱちぱちーーー。いやまぁそらそーだ。<br/>
で、ここまでは結構すぐいきましたわい。ところが、、、、</p>

<p><code>
% sudo /etc/init.d/td-agent stop
</code></p>

<p>つって、止めようとすると、、、なんと！両方のプロセスが止まる！<br/>
ひぎぃ・・・・/etc/init.d/td-agentの中身としばらくにらめっこ。</p>

<p>debian系のinit scriptの中では、start-stop-daemonってのがdaemonの起動・停止に<br/>
まつわるetc をやっていて、そのあたりをちょっと調べてみることに。</p>

<ul>
<li>fluentdのdo_stopでは、２回start-stop-daemonが呼ばれている

<ul>
<li>1回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;retry=TERM/30/KILL/5 &mdash;pidfile $PIDFILE &mdash;name ruby</li>
<li>2回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;oknodo &mdash;retry=TERM/30/KILL/5 &mdash;exec $DAEMON</li>
</ul>
</li>
</ul>


<p>と、いうのと、man start-stop-daemonの中身をみると。。。</p>

<p>```
Note: unless &mdash;pidfile is specified, start-stop-daemon behaves similar to killall(1).
start-stop-daemon will scan the process table looking for any processes which match
the process name, uid, and/or gid (if specified).</p>

<p>Any matching process will prevent &mdash;start from starting the daemon. All matching processes
will be sent the TERM signal (or the one specified via &mdash;signal or &mdash;retry)
if &mdash;stop is specified.</p>

<p>For  daemons  which  have  long-lived children which need to live through a &mdash;stop,
you must specify a pidfile.
```</p>

<p>つまり・・・&mdash;pidfileオプションが指定されてなければ、killallと同じように動く、と・・・<br/>
おお・・・そりゃ両方のプロセス殺されるわけだ・・・<br/>
逆に言えば、&mdash;pidfileを指定しとけばkillの動作なのかな・・・</p>

<p>で、straceかけて、2パターン検証してみたYO。</p>

<h4>1回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;retry=TERM/30/KILL/5 &mdash;pidfile $PIDFILE &mdash;name ruby</h4>

<p>やってることは、</p>

<ol>
<li>$PIDFILEの中のprocessidをとってくる(ここでは、$PIDとしよう)</li>
<li>/proc/$PID/statが存在するか確認する</li>
<li>存在しない場合は、終わり</li>
<li>存在する場合は、3へ</li>
<li>killする</li>
<li>2に戻る</li>
</ol>


<p>をひたすら繰り返しております。<br/>
なんで、基本的にはkillと同じ動きなのかな。retry付きで。</p>

<h4>2回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;oknodo &mdash;retry=TERM/30/KILL/5 &mdash;exec $DAEMON</h4>

<p>こっちは、まじkillallだったわ。</p>

<ol>
<li>/proc/&lt;全ProcessのPID>/exe のsymbolic link先 == $DAEMON か確認</li>
<li>同じだったprocessにkillでsignal送信</li>
<li>同じのがなくなるまで1と2を繰り返す</li>
</ol>


<p>killall。<br/>
で、問題は、なんでこれを使う必要があるか・・・。<br/>
きっと、本体殺しても、まだ生き残ってるプロセスがいる可能性があるから、<br/>
なんだろうな・・・</p>

<p>そこまでプロセスわけた上でやろうとすると、ちょいと今今時間がないので、<br/>
一旦、各プロセスの本体を殺すinit scriptを書いてみたです。<br/>
普通にkillコマンドで書いてます。start-stop-daemon、まだ使いこなせまてん。</p>

<p>送るsignalは、<a href="http://docs.fluentd.org/articles/signals">ここ</a>に書いてあったので、INT/TERM。<br/>
今回はINTでお送りいたします。</p>

<p>/etc/init.d/td-agentの、do_stopを下記に書き換えてもらって、それコピーして、<br/>
/etc/init.d/td-agent_nginxつくってもらえれば、それぞれに殺すことができまっせ。</p>

<p>```
#</p>

<h1>Function that stops the daemon/service</h1>

<p>#
do_stop()
{</p>

<pre><code># Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
PID=`cat $PIDFILE`
kill -INT $PID
RETVAL="$?"
if [ $RETVAL -ne 0 ]; then
    RETVAL="2"
fi

ps aux | grep $PIDFILE &gt;/dev/null 2&gt;&amp;1
RETVAL="$?"
if [ $RETVAL -eq 0 ]; then
    rm -f $PIDFILE
    return "$RETVAL"
fi

return "2"
</code></pre>

<p>}
```</p>

<h3>終わりに</h3>

<hr />

<p>これでなんか問題出たら、他のプロセスも殺せるように改変しようかな。<br/>
(ご利用は各自の責任においてお願いします。Use at your own risk.)</p>

<p>たぶん、改変自体は、ループ回して、待つ作戦＋ps 結果をgrepしてプロセス毎の<br/>
PID取得する作戦かなー。</p>

<p>ま、一旦はこれである程度まではいけるので、ブログはここまでで。</p>

<p><a href="http://c.af.moshimo.com/af/c/click?a_id=442315&p_id=170&pc_id=185&pl_id=4157&guid=ON" target="_blank"><img src="http://image.moshimo.com/af-img/0068/000000004157.gif" width="300" height="250" style="border:none;"></a><img src="http://i.af.moshimo.com/af/i/impression?a_id=442315&p_id=170&pc_id=185&pl_id=4157" width="1" height="1" style="border:none;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Infra] Geo Directive in Nginx]]></title>
    <link href="http://blog.branch4.pw/blog/2014/03/06/infra-geo-directive-in-nginx/"/>
    <updated>2014-03-06T23:46:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/03/06/infra-geo-directive-in-nginx</id>
    <content type="html"><![CDATA[<div  class=post>
  送信元IPによって色々挙動変えたりしたいなー、 <br>
  と思って検索してたら、geo directiveがいい！！！ <br>
  的な記事があったので、読み進めてみた。 <br><br>
  が、結論、if directive使わないといけないので没案。 <br>
  nginxさんのif directiveは鬼門。 <br>
  挙動怪しいし、ifの中で使えるdirectiveもめっちゃ少なくて、あんまり意味なし。 <br>
  そんな意味のないエントリでした・・・ <br>
</div>

]]></content>
  </entry>
  
</feed>
