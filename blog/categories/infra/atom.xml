<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Infra | branch4 Blog]]></title>
  <link href="http://blog.branch4.pw/blog/categories/infra/atom.xml" rel="self"/>
  <link href="http://blog.branch4.pw/"/>
  <updated>2014-07-27T15:04:09+09:00</updated>
  <id>http://blog.branch4.pw/</id>
  <author>
    <name><![CDATA[root4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fluentdを複数起動したい]]></title>
    <link href="http://blog.branch4.pw/blog/2014/07/22/multiprocess-with-fluentd/"/>
    <updated>2014-07-22T22:30:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/07/22/multiprocess-with-fluentd</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<hr />

<p>タイトル通りなんだけど、「fluentdを複数起動したいなー」<br/>
って、質問いただいたので、簡単に手順を書いておきまっせ。</p>

<h3>fluentdとは？</h3>

<hr />

<p>知らない人はいないね。はい。</p>

<p><a href="http://www.fluentd.org/"><img src="http://blog.branch4.pw/images/2014/07/fluentd-logo.png" alt="fluentd logo" /></a></p>

<p><a href="http://www.treasuredata.com">tresuredata</a>で開発されたオープンソースのデータコレクタですのん。<br/>
詳しいことは、<a href="http://www.fluentd.org/">fluentdのwebsite</a>にいけば大体書いてあるね。</p>

<p>この前行った、AWSSummit Tokyo2014でも、どの会社も、<br/>
「弊社では、ログはfluentdで処理しています！(ドヤ)」的な感じでした。<br/>
使うのが普通ですね、はい。</p>

<p>ちなみに僕はインストールするの今回初です(笑)<br/>
弊社では使ってるんですけどね、もう現場仕事から離れること・・・200X年くらい。</p>

<p>なのでね、今回の記事のイメージはこんな感じだけど、なんか間違って理解してたら誰か突っ込みよろ！</p>

<p><img src="http://blog.branch4.pw/images/2014/07/multiprocess.png" alt="multiprocess with fluentd" /></p>

<h3>前提</h3>

<hr />

<p>multiprocessといっても、</p>

<p><a href="https://github.com/frsyuki/fluent-plugin-multiprocess">こういうの</a><br/>
とか<br/>
<a href="http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin/">こういうの</a><br/>
とは違う意味で。</p>

<p>本当に、プロセスを別で起動したいんです！という話。<br/>
ようは、片方のプロセス止めるときに、もう一方は止めたくないんだよね、的なアレ。</p>

<!-- more -->


<p></p>

<h2>詳細</h2>

<hr />

<p>まず、fluentd自体、ubuntuだとprecise/lucidしかサポートしていないので、<br/>
binaryで入れたい方は対応osお使いください。</p>

<h3>fluentdに限らず</h3>

<hr />

<p>fluentdに限らずな話ではあるんですが、なにかしらのアプリを複数起動する、<br/>
ということ自体は、そんなに難しいことではないす。面倒な時はあるけど。</p>

<p>気をつけるのは、以下。</p>

<ul>
<li>IP address</li>
<li>port</li>
<li>other sharable resources(files/sockets)</li>
</ul>


<p>大体のアプリは、上記を専有して起動しちゃうので、それが被らないように<br/>
configをいじったりすれば概ね同時に起動して問題なす。</p>

<h3>fluentdの場合</h3>

<hr />

<p>で、fluentd@ubuntu(precise pangolin)の場合にどうやったかね、というお話。</p>

<p>まず、インストール後、今回触るファイルたちのリストは以下。</p>

<ul>
<li>/etc/init.d/td-agent</li>
<li>/etc/td-agent/td-agent.conf</li>
<li>/etc/default/td-agent</li>
</ul>


<p>それぞれ軽く解説をつけると・・・</p>

<ul>
<li>/etc/init.d/td-agent

<ul>
<li>fluentdの起動スクリプト</li>
<li>このファイルいじって、PIDファイルが被らないようにする</li>
</ul>
</li>
<li>/etc/td-agent/td-agent.conf

<ul>
<li>fluentdのconfigファイル</li>
<li>これの設定をいじって、portが被らないようにする</li>
</ul>
</li>
<li>/etc/default/td-agent

<ul>
<li>fluentdの起動オプション設定ファイル</li>
<li>これの設定をいじって、起動時に読み込むconfigを切り替える</li>
</ul>
</li>
</ul>


<p>こんな感じ。実際のところは上記の３ファイルをコピって、二つずつ作るのだ。がっはっは。</p>

<p>と、いうわけで、まずは各ファイルのコピーだけ作っておきましょ。</p>

<p><code>
% sudo cp /etc/init.d/td-agent /etc/init.d/td-agent_nginx
% sudo cp /etc/default/td-agent /etc/default/td-agent_nginx
% sudo cp /etc/td-agent/td-agent_nginx.conf /etc/td-agent/td-agent_nginx.conf
</code></p>

<p>suffinxにnginxっていれてるのは、特に意味はないす。<br/>
ただ、なんのためのfluentdなのか見分けつかなくなるようなファイル名はやめたほうがよいかと。</p>

<h3>各ファイルの詳細</h3>

<hr />

<h4>/etc/init.d/td-agent_nginx</h4>

<p>```</p>

<h1>Introduce the short server&rsquo;s name here</h1>

<p>NAME=td-agent_nginx ★ここ修正</p>

<h1>Read configuration variable file if it is present</h1>

<p>[ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME</p>

<h1>PATH should only include /usr/* if it runs after the mountnfs.sh script</h1>

<p>PATH=/sbin:/usr/sbin:/bin:/usr/bin
USER=td-agent                   # Running user
GROUP=td-agent                  # Running group
DESC=td-agent_nginx             # Introduce a short description here★ここ修正
PIDFILE=/var/run/$NAME/$NAME.pid
DAEMON=/usr/lib/fluent/ruby/bin/ruby # Introduce the server&rsquo;s location here</p>

<h1>Arguments to run the daemon with</h1>

<h1>DAEMON_ARGS=&ldquo;/usr/sbin/td-agent $DAEMON_ARGS &mdash;daemon $PIDFILE &mdash;log /var/log/td-agent/td-agent_nginx.log&rdquo; ★ここ修正</h1>

<p>DAEMON_ARGS=&ldquo;/usr/sbin/td-agent $DAEMON_ARGS $PIDFILE &mdash;log /var/log/td-agent/td-agent_nginx.log&rdquo; ★ここ修正
echo $DAEMON_ARGS
SCRIPTNAME=/etc/init.d/$NAME
START_STOP_DAEMON_ARGS=&ldquo;&rdquo;
```</p>

<h4>/etc/td-agent/td-agent_nginx.conf</h4>

<p>インストール直後のconfigっす。コメントは邪魔なのでとっぱらってます。</p>

<p>```</p>

<h3>#</h3>

<h2>Output descriptions:</h2>

<h1>#</h1>

<p><match td.*.*>
  type tdlog
  apikey YOUR_API_KEY</p>

<p>  auto_create_table
  buffer_type file
  buffer_path /var/log/td-agent_nginx/buffer/td ★ここ修正(同じログファイル握らないように)
</match></p>

<p><match debug.**>
  type stdout
</match></p>

<h3>#</h3>

<h2>Source descriptions:</h2>

<h1>#</h1>

<p><source>
  type forward
  port 25224 ★defaultだと24224になってるので、明示的に変更しておく
</source></p>

<h1>HTTP input</h1>

<p><source>
  type http
  port 18888 ★ここも明示的に変更しておく
</source></p>

<h2>live debugging agent</h2>

<p><source>
  type debug_agent
  bind 127.0.0.1
  port 25235 ★ここも明示的に変更しておく
</source>
```</p>

<h4>/etc/default/td-agent_nginx</h4>

<p>起動時につけるオプションね。<br/>
ここで読み込むconfig変更しますゆえお忘れなく。</p>

<p>```</p>

<h1>This file is sourced by /bin/sh from /etc/init.d/td-agent</h1>

<h1>Options to pass to td-agent</h1>

<p>DAEMON_ARGS=&ldquo;&mdash;config /etc/td-agent/td-agent_nginx.conf&rdquo; ★これ追記。違う設定ファイル読み込むように
```</p>

<p>このくらい修正をかけると、だ、下記コマンドで動くはず、だ。<br/>
<code>
% sudo /etc/init.d/td-agent start
% sudo /etc/init.d/td-agent_nginx start
% ps aux|grep td-agent
td-agent 11314  0.0  3.5  98888 17912 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --daemon /var/run/td-agent/td-agent.pid --log /var/log/td-agent/td-agent.log
td-agent 11317  2.4  5.2 125704 26260 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --daemon /var/run/td-agent/td-agent.pid --log /var/log/td-agent/td-agent.log
td-agent 11348  0.0  3.5  98888 17908 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --config /etc/td-agent/td-agent_nginx.conf --daemon /var/run/td-agent_nginx/td-agent_nginx.pid --log /var/log/td-agent/td-agent_nginx.log
td-agent 11351  5.5  5.2 125704 26224 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --config /etc/td-agent/td-agent_nginx.conf --daemon /var/run/td-agent_nginx/td-agent_nginx.pid --log /var/log/td-agent/td-agent_nginx.log
</code></p>

<p>ぱちぱちぱちぱちーーー。いやまぁそらそーだ。<br/>
で、ここまでは結構すぐいきましたわい。ところが、、、、</p>

<p><code>
% sudo /etc/init.d/td-agent stop
</code></p>

<p>つって、止めようとすると、、、なんと！両方のプロセスが止まる！<br/>
ひぎぃ・・・・/etc/init.d/td-agentの中身としばらくにらめっこ。</p>

<p>debian系のinit scriptの中では、start-stop-daemonってのがdaemonの起動・停止に<br/>
まつわるetc をやっていて、そのあたりをちょっと調べてみることに。</p>

<ul>
<li>fluentdのdo_stopでは、２回start-stop-daemonが呼ばれている

<ul>
<li>1回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;retry=TERM/30/KILL/5 &mdash;pidfile $PIDFILE &mdash;name ruby</li>
<li>2回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;oknodo &mdash;retry=TERM/30/KILL/5 &mdash;exec $DAEMON</li>
</ul>
</li>
</ul>


<p>と、いうのと、man start-stop-daemonの中身をみると。。。</p>

<p>```
Note: unless &mdash;pidfile is specified, start-stop-daemon behaves similar to killall(1).
start-stop-daemon will scan the process table looking for any processes which match
the process name, uid, and/or gid (if specified).</p>

<p>Any matching process will prevent &mdash;start from starting the daemon. All matching processes
will be sent the TERM signal (or the one specified via &mdash;signal or &mdash;retry)
if &mdash;stop is specified.</p>

<p>For  daemons  which  have  long-lived children which need to live through a &mdash;stop,
you must specify a pidfile.
```</p>

<p>つまり・・・&mdash;pidfileオプションが指定されてなければ、killallと同じように動く、と・・・<br/>
おお・・・そりゃ両方のプロセス殺されるわけだ・・・<br/>
逆に言えば、&mdash;pidfileを指定しとけばkillの動作なのかな・・・</p>

<p>で、straceかけて、2パターン検証してみたYO。</p>

<h4>1回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;retry=TERM/30/KILL/5 &mdash;pidfile $PIDFILE &mdash;name ruby</h4>

<p>やってることは、</p>

<ol>
<li>$PIDFILEの中のprocessidをとってくる(ここでは、$PIDとしよう)</li>
<li>/proc/$PID/statが存在するか確認する</li>
<li>存在しない場合は、終わり</li>
<li>存在する場合は、3へ</li>
<li>killする</li>
<li>2に戻る</li>
</ol>


<p>をひたすら繰り返しております。<br/>
なんで、基本的にはkillと同じ動きなのかな。retry付きで。</p>

<h4>2回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;oknodo &mdash;retry=TERM/30/KILL/5 &mdash;exec $DAEMON</h4>

<p>こっちは、まじkillallだったわ。</p>

<ol>
<li>/proc/&lt;全ProcessのPID>/exe のsymbolic link先 == $DAEMON か確認</li>
<li>同じだったprocessにkillでsignal送信</li>
<li>同じのがなくなるまで1と2を繰り返す</li>
</ol>


<p>killall。<br/>
で、問題は、なんでこれを使う必要があるか・・・。<br/>
きっと、本体殺しても、まだ生き残ってるプロセスがいる可能性があるから、<br/>
なんだろうな・・・</p>

<p>そこまでプロセスわけた上でやろうとすると、ちょいと今今時間がないので、<br/>
一旦、各プロセスの本体を殺すinit scriptを書いてみたです。<br/>
普通にkillコマンドで書いてます。start-stop-daemon、まだ使いこなせまてん。</p>

<p>送るsignalは、<a href="http://docs.fluentd.org/articles/signals">ここ</a>に書いてあったので、INT/TERM。<br/>
今回はINTでお送りいたします。</p>

<p>/etc/init.d/td-agentの、do_stopを下記に書き換えてもらって、それコピーして、<br/>
/etc/init.d/td-agent_nginxつくってもらえれば、それぞれに殺すことができまっせ。</p>

<p>```
#</p>

<h1>Function that stops the daemon/service</h1>

<p>#
do_stop()
{</p>

<pre><code># Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
PID=`cat $PIDFILE`
kill -INT $PID
RETVAL="$?"
if [ $RETVAL -ne 0 ]; then
    RETVAL="2"
fi

ps aux | grep $PIDFILE &gt;/dev/null 2&gt;&amp;1
RETVAL="$?"
if [ $RETVAL -eq 0 ]; then
    rm -f $PIDFILE
    return "$RETVAL"
fi

return "2"
</code></pre>

<p>}
```</p>

<h3>終わりに</h3>

<hr />

<p>これでなんか問題出たら、他のプロセスも殺せるように改変しようかな。<br/>
(ご利用は各自の責任においてお願いします。Use at your own risk.)</p>

<p>たぶん、改変自体は、ループ回して、待つ作戦＋ps 結果をgrepしてプロセス毎の<br/>
PID取得する作戦かなー。</p>

<p>ま、一旦はこれである程度まではいけるので、ブログはここまでで。</p>

<p><a href="http://c.af.moshimo.com/af/c/click?a_id=442315&p_id=170&pc_id=185&pl_id=4157&guid=ON" target="_blank"><img src="http://image.moshimo.com/af-img/0068/000000004157.gif" width="300" height="250" style="border:none;"></a><img src="http://i.af.moshimo.com/af/i/impression?a_id=442315&p_id=170&pc_id=185&pl_id=4157" width="1" height="1" style="border:none;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Infra] Geo Directive in Nginx]]></title>
    <link href="http://blog.branch4.pw/blog/2014/03/06/infra-geo-directive-in-nginx/"/>
    <updated>2014-03-06T23:46:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/03/06/infra-geo-directive-in-nginx</id>
    <content type="html"><![CDATA[<div  class=post>
  送信元IPによって色々挙動変えたりしたいなー、 <br>
  と思って検索してたら、geo directiveがいい！！！ <br>
  的な記事があったので、読み進めてみた。 <br><br>
  が、結論、if directive使わないといけないので没案。 <br>
  nginxさんのif directiveは鬼門。 <br>
  挙動怪しいし、ifの中で使えるdirectiveもめっちゃ少なくて、あんまり意味なし。 <br>
  そんな意味のないエントリでした・・・ <br>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Infra] DNAT環境下でのrails + Devise]]></title>
    <link href="http://blog.branch4.pw/blog/2014/03/04/infra-dnatrails-devise/"/>
    <updated>2014-03-04T02:19:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/03/04/infra-dnatrails-devise</id>
    <content type="html"><![CDATA[<div  class=post>
  railsとdeviseを組み合わせて使うことはよくあることです。たぶん。 <br>
  んで、DNAT環境下で使うと、最初に認証できなかったら、認証画面に <br>
  リダイレクトする、っていうとこで困っちゃう。というか僕は困っちゃった。 <br> <br>
  deviseのサイトに、認証失敗時のリダイレクトを任意画面にする、的な方法が <br>
  出てたけど、そこだけが対応箇所なのかもようわからんので、nginx側で、 <br>
  30x系リダイレクト時の、Locationヘッダを書き換える方法にしてみた話。 <br>
  いえ、全然難しくないんだけどね。。。 <br>
  <!-- more -->
  <br>
  nginx.confあたりに、 <br> <br>
  <pre  class=prettyprint>
    <span  style=font-size: small;>
      proxy_redirect http://xxx.yyy.jp/ http://xxx.yyy.jp:10080/;
    </span></pre>
  って書く。するとHTTP responseで、 <br><br>
  Location: http://xxx.yyy.jp/ <br> <br>
  を受信したときに、 <br> <br>
  Location: http://xxx.yyy.jp:10080/ <br> <br>
  に書き換えてくれますよ、って話。 <br>
  今度わかりやすいように図解もつけようかな。 <br>
  今日は眠いからこれで終了。 <br>
</div>

]]></content>
  </entry>
  
</feed>
