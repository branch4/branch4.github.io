<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Development | branch4 Blog]]></title>
  <link href="http://blog.branch4.pw/blog/categories/web-development/atom.xml" rel="self"/>
  <link href="http://blog.branch4.pw/"/>
  <updated>2014-08-08T00:26:08+09:00</updated>
  <id>http://blog.branch4.pw/</id>
  <author>
    <name><![CDATA[root4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fluentdのテスト環境をvagrantでセットアップしてみるべ]]></title>
    <link href="http://blog.branch4.pw/blog/2014/08/07/setup-test-environment-with-vagrant/"/>
    <updated>2014-08-07T22:00:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/08/07/setup-test-environment-with-vagrant</id>
    <content type="html"><![CDATA[<p>こんにちは。Vagrant使ってみよ。と思った<a href="https://twitter.com/xengineer01">@xengineer01</a>です。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/logo_vagrant.png" alt="vagrant logo" /></p>

<h2>概要</h2>

<hr />

<p>まぁ使ってみたかっただけです。<br/>
fluentdの検証するし、今後も環境構築は何回もするし、ついでだから vagrant使ってみよ、<br/>
なノリです。</p>

<p>実際は、今回のエントリーでは fluentd の環境構築までいかなかったので、何回かに分けて書きますわ。</p>

<h2>vagrantって？</h2>

<hr />

<p>どこでも同じ環境を寸分違わず再現できるセットアップツール、って感じなのかな。<br/>
boxつくって、設定ファイル書いとけば、どこに持ってっても同じ環境が作れて、<br/>
問題の再現とかもしやすい、ということです。便利だわー。<br/>
今回は、数年ぶりに環境構築する用事があったので、使おうと思ったり。</p>

<!-- more -->


<h2>インストール</h2>

<hr />

<p><a href="http://www.vagrantup.com/downloads">こちら</a>からダウンロードしてインストール。<br/>
簡単だから。ただし、ツール自体にGUIはないのでCLIに抵抗がある人はここでおかえりいただきます。</p>

<h2>セットアップ</h2>

<hr />

<p>まずは、<a href="http://www.vagrantup.com/">公式サイト</a>のドキュメンツを辿ってみるべし。<br/>
Getting Startedを一通りやれば結構わかる。</p>

<h2>諸情報</h2>

<p>今回使ったのは、</p>

<ul>
<li>vagrant version 1.6.3</li>
<li>Windows PC + VirtualBox 4.3.8r92456</li>
<li>MintLinux17 + VirtualBox 4.3 ?</li>
<li>MacOSX(Mavericks) + VirtualBox 4.3 ?</li>
</ul>


<p>でございます。作った Vagrantfile 含めた設定は、全環境でちゃんと動いてるぽかったです。</p>

<h3>Vagrantfile なる設定ファイルが肝</h3>

<p>設定ファイルのこと。</p>

<ul>
<li>1つのプロジェクトあたり、1つ存在する。</li>
<li>プロジェクト内に、どんなサーバが何台存在しているか</li>
<li>ネットワーク構成どんな感じか</li>
<li>各サーバに何インストールしとくか、設定どうなってるか</li>
</ul>


<p>などなど定義します。たぶん、流れ的には、</p>

<ul>
<li>Vagrantfileの書き方覚える</li>
<li>Provisioningツールの使い方覚える or 既に覚えてれば不要</li>
<li>Provider(VirtualBox/KVM/Docker etc&hellip;)の使い分け的なものを覚える</li>
<li>Boxの作り方覚える</li>
</ul>


<p>この辺を覚えていくんでしょう。</p>

<h3>Projectディレクトリと、Vagrantfile を作る！</h3>

<p>下記コマンドを実行してね。<br/>
(本Entryでは、以降Projectのルートディレクトリは、PROJECT_ROOTとします)
<code>``
$ mkdir &lt;PROJECT_ROOT&gt;
$ cd &lt;PROJECT_ROOT&gt;
$ vagrant init
A</code>Vagrantfile<code>has been placed in this directory. You are now
ready to</code>vagrant up<code>your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
</code>vagrantup.com` for more information on using Vagrant.</p>

<p>```</p>

<p>やってることは、</p>

<ol>
<li>Projectディレクトリを作成</li>
<li>Projectディレクトリに移動</li>
<li>Projectを初期化(Vagrantfileが生成される)</li>
</ol>


<p>でございます。コマンドで生成された Vagrantfileから、コメントの行を消すと、、、</p>

<p>```
$ cat Vagrantfile</p>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;base&rdquo;
end
```
こんな感じ。APIのバージョンは、"2" のようです。<br/>
config.vm.box = &ldquo;base"は、よくわからないけど、今はいいや。<br/>
Vagrantfile は、git,svn等の、VCSにcommitすべきものらしいので、commit。</p>

<h3>Box とは？</h3>

<p>生成された、Vagrantfile中にも出てくるけど、Boxとは？<br/>
Vagrant では、box っていうのが、ひとつのベースイメージになるんだと。<br/>
仮想イメージの呼び方をVagrant風に言うと &ldquo;Box&rdquo; なのです。</p>

<h3>Box のインストール</h3>

<p>まずは、自分のマシンに、Box(仮想イメージ)を追加します。<br/>
下記コマンドを、実行。</p>

<p>```
$ vagrant box add hashicorp/precise64
==> box: Loading metadata for box &lsquo;hashicorp/precise64&rsquo;</p>

<pre><code>box: URL: https://vagrantcloud.com/hashicorp/precise64
This box can work with multiple providers! The providers that it
can work with are listed below. Please review the list and choose
the provider you will be working with.

1) hyperv
2) virtualbox
3) vmware_fusion

Enter your choice: 2

==&gt; box: Adding box 'hashicorp/precise64' (v1.1.0) for provider: virtualbox
    box: Downloading: https://vagrantcloud.com/hashicorp/precise64/version/2/provider/virtualbox.box
    ==&gt; box: Successfully added box 'hashicorp/precise64' (v1.1.0) for 'virtualbox'!
</code></pre>

<p>```</p>

<p>今回使用してる、hashicorp さん謹製の box、precise64 は、</p>

<ul>
<li>hyperv</li>
<li>virtualbox</li>
<li>vmware_fusion</li>
</ul>


<p>に対応してるみたいだけど、2番の virtualbox を選択。<br/>
そうすると、下記ディレクトリ配下に、VirtualBox のイメージがダウンロードされたり、<br/>
Vagrantfileのような諸情報が格納されます。(結構時間かかる)</p>

<p>${HOME}/.vagrant.d<br/>
${HOME}/.vagrant.d/boxes<br/>
${HOME}/.vagrant.d/data<br/>
${HOME}/.vagrant.d/gems<br/>
${HOME}/.vagrant.d/rgloader<br/>
${HOME}/.vagrant.d/tmp</p>

<p>たぶん大事なのは、boxes 配下なのかな？きっとそうだろう。<br/>
イメージのダウンロード元は、<a href="https://vagrantcloud.com/">ここ</a>からみたい。</p>

<p>初期化完了した状態で、</p>

<p><code>
$ vagrant up
</code>
実行すると、今追加したほやほやのboxがすぐ起動。<br/>
ただ、諸々未設定なので、一旦落として設定しましょ。</p>

<ul>
<li>ネットワーク設定</li>
<li>ホスト名の設定</li>
<li>起動時にインストールするアプリがあるのかどうか</li>
</ul>


<p>などなど、設定していきます。<br/>
まずは、停止。</p>

<p><code>
$ vagrant destroy
</code></p>

<h3>Vagrantfile設定</h3>

<p>設定自体は、初期化時に生成された、Vagrantfileを編集していく。</p>

<p>Vagrantfile では、下記なんかを定義できる</p>

<ul>
<li>起動するマシンスペック</li>
<li>インストールするアプリケーション</li>
<li>どうやってアクセスするか</li>
</ul>


<p>今回は、こんなマシンにしようかな。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/guestserver01.png" alt="guestserver" /></p>

<ul>
<li>CPU x 1 個</li>
<li>Memory 512 MB</li>
<li>HDD 15 GB</li>
<li>Ubuntu12.04</li>
<li>Network(DHCP/public)</li>
<li>hostname: testserver</li>
<li>apache pre-install</li>
</ul>


<p><a href="http://docs.vagrantup.com/v2/getting-started/index.html">ここ</a>とか、
<a href="http://docs.vagrantup.com/v2/virtualbox/configuration.html">ここ</a>を参照して、書いていく。<br/>
ハードのスペック関連は、VirtualBoxのAPI経由なので、<a href="http://www.virtualbox.org/manual/ch08.html">ここ</a>
からやりたいことを探すんだーね。<br/>
そして出来上がったVagrantfile。(まだスペック関連入れてない版)
```
$ cat Vagrantfile</p>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;hashicorp/precise64&rdquo;
  config.vm.hostname = &ldquo;testserver&rdquo;
  config.vm.network &ldquo;public_network&rdquo;
  config.vm.provision :shell, path: &ldquo;bootstrap.sh&rdquo;
end
```
順番に説明。</p>

<h4>config.vm.box = &ldquo;hashicorp/precise64&rdquo;</h4>

<p>このBoxは、このイメージですよ！と、いうこと。</p>

<h4>config.vm.hostname = &ldquo;testserver&rdquo;</h4>

<p>Host名は、testserverですよ！と、いうこと。</p>

<h4>config.vm.network &ldquo;public_network&rdquo;</h4>

<p>Public、といっても、グローバルIPが必ず振られるわけではない。<br/>
たぶん、下記環境だったらグローバルが来るんじゃないか？</p>

<ul>
<li>Network IF が 1 つ</li>
<li>DHCP でグローバルが割り当てられる</li>
</ul>


<p>VirtualBox では、NAT になる。</p>

<p>Network IF が複数ある場合は、こんな感じに指定するそうな。
<code>
config.vm.network "public_network", bridge: 'en1: Wi-Fi(AirPort)'
</code></p>

<h4>config.vm.provision :shell, path: bootstrap.sh</h4>

<p>ゲストサーバ起動時に、PROJECT_ROOT/bootstrap.sh を実行しろ、ということ。<br/>
なので、ここに、</p>

<p>```</p>

<h1>!/usr/bin/evn bash</h1>

<p>apt-get update
apt-get install -y apache2
```</p>

<p>って書いておくと、起動時に、apache2 が入った状態になります。<br/>
さて、準備は整ったはずなので、いざ起動！！</p>

<p>```
$ vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Importing base box &lsquo;hashicorp/precise64&rsquo;&hellip;
==> default: Matching MAC address for NAT networking&hellip;
==> default: Checking if box &lsquo;hashicorp/precise64&rsquo; is up to date&hellip;
==> default: Setting the name of the VM: project_blog_default_1407340802923_76317
==> default: Fixed port collision for 22 => 2222. Now on port 2204.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Available bridged network interfaces:
1) en0: Wi-Fi (AirPort)
2) en1: Thunderbolt 1
3) en2: Thunderbolt 2
4) bridge0
5) p2p0</p>

<p>```
あ、NIC だけじゃなくて色々あるから指定しないとだめなんですね・・・<br/>
一旦とめて、Vagrantfile を編集。</p>

<p>```
$ cat Vagrantfile</p>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;hashicorp/precise64&rdquo;
  config.vm.hostname = &ldquo;testserver&rdquo;
  config.vm.network &ldquo;public_network&rdquo;
  config.vm.network &ldquo;public_network&rdquo;, bridge: &lsquo;en0: Wi-Fi (AirPort)&rsquo;
  config.vm.provision :shell, path: &ldquo;bootstrap.sh&rdquo;
end
```</p>

<p>気を取り直して、再度実行。</p>

<p>```
$ vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Checking if box &lsquo;hashicorp/precise64&rsquo; is up to date&hellip;
==> default: Fixed port collision for 22 => 2222. Now on port 2205.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
default: Adapter 2: bridged
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2205 (adapter 1)
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2205
default: SSH username: vagrant
default: SSH auth method: private key
</code></pre>

<p>==> default: Machine booted and ready!
==> default: Checking for guest additions in VM&hellip;</p>

<pre><code>default: The guest additions on this VM do not match the installed version of
default: VirtualBox! In most cases this is fine, but in rare cases it can
default: prevent things such as shared folders from working properly. If you see
default: shared folder errors, please make sure the guest additions within the
default: virtual machine match the version of VirtualBox you have installed on
default: your host and reload your VM.
default:
default: Guest Additions Version: 4.2.0
default: VirtualBox Version: 4.3
</code></pre>

<p>==> default: Setting hostname&hellip;
==> default: Configuring and enabling network interfaces&hellip;
==> default: Mounting shared folders&hellip;</p>

<pre><code>default: /vagrant =&gt; /Users/nemoto_hideaki/work/vagrant/project_blog
</code></pre>

<p>==> default: Running provisioner: shell&hellip;</p>

<pre><code>default: Running: /var/folders/kn/k_t_9_cs0yjd5q44m9w8b8wh0000gn/T/vagrant-shell20140807-3962-19neoc2.sh
</code></pre>

<p>==> default: stdin: is not a tty
==> default: bash: /tmp/vagrant-shell: /usr/bin/evn: bad interpreter: No such file or directory
The following SSH command responded with a non-zero exit status.
Vagrant assumes that this means the command failed!</p>

<p>chmod +x /tmp/vagrant-shell &amp;&amp; /tmp/vagrant-shell</p>

<p>Stdout from the command:</p>

<p>Stderr from the command:</p>

<p>stdin: is not a tty
bash: /tmp/vagrant-shell: /usr/bin/evn: bad interpreter: No such file or directory
```</p>

<p>はい、再度失敗orz<br/>
なんだなんだ・・・bootstrap.shを確認確認・・・</p>

<p>&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash<br/>
&#35;!/usr/bin/evn bash</p>

<p>evn ね・・・修正いたしまして・・・
```
&#35;!/usr/bin/env bash</p>

<p>apt-get update
apt-get install -y apache2
```
修正して、再度実行。</p>

<p><code>
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==&gt; default: Checking if box 'hashicorp/precise64' is up to date...
==&gt; default: VirtualBox VM is already running.
</code>
あ、さっき実行してるから実行中なのか。もしかして今回は bootstrap.sh が実行されてないかも。<br/>
なので、下記コマンドどっちかで強制実行。</p>

<p><code>
$ vagrant reload --provision
$ vagrant provision
</code></p>

<p>違いは、stdoutみる限り、たぶん・・・</p>

<h4>$ vagrant reload &mdash;provision</h4>

<p>こっちは一旦マシン再起動かけてからの強制実行。</p>

<h4>$ vagrant provision</h4>

<p>こっちは起動したままbootstrap.shだけ強制実行。</p>

<p>どっちか実行すると、ちゃんと apache がインストールされます。</p>

<h3>ログイン！</h3>

<p>次は実際にログインアクセスしますよと。
```
$ vagrant ssh
Welcome to Ubuntu 12.04 LTS (GNU/Linux 3.2.0-23-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a>
Welcome to your Vagrant-built virtual machine.
Last login: Fri Sep 14 06:23:18 2012 from 10.0.2.2
vagrant@testserver:~$
```</li>
</ul>


<p>おーいえす。ちゃんとホスト名も設定されてる。</p>

<p>ちなみに起動時の標準出力じっくりみると色々わかるんだけど、起動時に、guestのssh port(22)と、<br/>
hostの何番かを紐づけてくれてるので、そこにアクセスしてもいいのかも。<br/>
```
Hideaki-no-MacBook-Pro:project_blog nemoto_hideaki$ vagrant reload &mdash;provision
==> default: Attempting graceful shutdown of VM&hellip;
==> default: Checking if box &lsquo;hashicorp/precise64&rsquo; is up to date&hellip;
==> default: Clearing any previously set forwarded ports&hellip;
==> default: Fixed port collision for 22 => 2222. Now on port 2204.
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
default: Adapter 2: bridged
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2204 (adapter 1) &lt;--ここ！！★
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2204
default: SSH username: vagrant
default: SSH auth method: private key
</code></pre>

<p>==> default: Machine booted and ready!
==> default: Checking for guest additions in VM&hellip;
```</p>

<p>というわけで、localhostの 2204 番にアクセスしてみるも・・・
<code>
$ ssh -p 2204 vagrant@127.0.0.1
vagrant@127.0.0.1's password:
</code>
private key 設定すればよさげだけど・・・どの key だ？面倒なんでパス。<br/>
つまり、こんな設定をして、vagrant up/vagrant ssh すればつながるよ！<br/>
という話でした。</p>

<p>はっ！マシンスペック！変えるんだった。とりあえず、default のままのスペックは下記。<br/>
```
$ cat /proc/cpuinfo | grep -E &lsquo;processor|model name&rsquo;
processor: 0
model name: Intel&reg; Core&trade; i5-4258U CPU @ 2.40GHz
processor: 1
model name: Intel&reg; Core&trade; i5-4258U CPU @ 2.40GHz</p>

<p>$ free -m</p>

<pre><code>         total       used       free     shared    buffers     cached
         Mem:           365        321         43          0         11        248
         -/+ buffers/cache:         61        303
         Swap:          767          0        767
</code></pre>

<p>$ df -h
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/precise64-root   79G  2.3G   73G   4% /
udev                        174M  4.0K  174M   1% /dev
tmpfs                        74M  288K   73M   1% /run
none                        5.0M     0  5.0M   0% /run/lock
none                        183M     0  183M   0% /run/shm
/dev/sda1                   228M   25M  192M  12% /boot
vagrant                     233G   92G  142G  40% /vagrant
```
CPU : 2個
Memory : 384MB
HDD : 80GB
(VirtualBox の GUI から引っ張って来てるスペック)</p>

<ul>
<li>CPU : 1個</li>
<li>Memory 512MB</li>
<li>HDD 15GB</li>
</ul>


<p>やることは、</p>

<ul>
<li>CPUを一個に減らす</li>
<li>Memoryを512MBに増やす</li>
<li>HDDを15GBに減らす</li>
</ul>


<p><a href="http://docs.vagrantup.com/v2/virtualbox/configuration.html">参考サイト１</a><br/>
<a href="http://www.virtualbox.org/manual/ch08.html">参考サイト２</a><br/>
上記２サイトを見比べた結果・・・
```
$ cat Vagrantfile
VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &ldquo;hashicorp/precise64&rdquo;
  config.vm.hostname = &ldquo;testserver&rdquo;
  config.vm.network &ldquo;public_network&rdquo;, bridge: &lsquo;en0: Wi-Fi (AirPort)&rsquo;
  config.vm.provision :shell, path: &ldquo;bootstrap.sh&rdquo;</p>

<p>  # ここから下を追記した
  config.vm.provider :virtualbox do |v|</p>

<pre><code>v.customize ["modifyvm", :id, "--memory", "512"]
v.customize ["modifyvm", :id, "--cpus", "1"]
v.customize ["modifyhd", "b5fc9c57-f008-4118-a03f-e535f25deea4", "--resize", "1024"]
</code></pre>

<p>  end
end
<code>
こう。こんな感じでいけるはず。  
modifyhd の横の、"b5fc9c57-f008-4118-a03f-e535f25deea4"は、VirtualBox イメージのイメージファイルの UUID。  
下記コマンド実行すればみれるです。
</code>
$ VBoxManage list -l vms
Name:            project_blog_default_1407343357247_93821
Groups:          /
Guest OS:        Ubuntu (64 bit)
UUID:            7819729d-541f-47b8-8607-ec50965f4901
&hellip;
(中略)
&hellip;
SATA Controller (0, 0): /Users/nemoto_hideaki/VirtualBox VMs/project_blog_default_1407343357247_93821/box-disk1.vmdk (UUID: b5fc9c57-f008-4118-a03f-e535f25deea4) &lt;&mdash; これ！！
&hellip;
(中略)
&hellip;
```</p>

<p>よし！実行！
```
$ vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
&hellip;
(中略)
&hellip;
A customization command failed:</p>

<p>[&ldquo;modifyhd&rdquo;, &ldquo;b5fc9c57-f008-4118-a03f-e535f25deea4&rdquo;, &ldquo;&mdash;resize&rdquo;, &ldquo;1024&rdquo;]</p>

<p>The following error was experienced:</p>

<h1>&lt;Vagrant::Errors::VBoxManageError: There was an error while executing <code>VBoxManage</code>, a CLI used by Vagrant</h1>

<p>for controlling VirtualBox. The command and stderr is shown below.</p>

<p>Command: [&ldquo;modifyhd&rdquo;, &ldquo;b5fc9c57-f008-4118-a03f-e535f25deea4&rdquo;, &ldquo;&mdash;resize&rdquo;, &ldquo;1024&rdquo;]</p>

<p>Stderr: 0%&hellip;
Progress state: VBOX_E_NOT_SUPPORTED
VBoxManage: error: Resize hard disk operation for this format is not implemented yet!</p>

<blockquote></blockquote>

<p>Please fix this customization and try again.
```</p>

<p>はい、まただめ・・・orz<br/>
VBoxManage: error: Resize hard disk operation for this format is not implemented yet!<br/>
まだ実装してねーってよ。あきらめよう。</p>

<p>HDD の件を削って実行して、スペック確認した結果。
```
vagrant@testserver:~$ cat /proc/cpuinfo | grep -E &lsquo;processor|model name&rsquo;
processor   : 0
model name  : Intel&reg; Core&trade; i5-4258U CPU @ 2.40GHz
vagrant@testserver:~$ free -m</p>

<pre><code>         total       used       free     shared    buffers     cached
</code></pre>

<p>Mem:           491        338        153          0         15        260
&ndash;/+ buffers/cache:         61        429
Swap:          767          0        767
vagrant@testserver:~$ df -h
Filesystem                  Size  Used Avail Use% Mounted on
/dev/mapper/precise64-root   79G  2.3G   73G   4% /
udev                        237M  4.0K  237M   1% /dev
tmpfs                        99M  288K   99M   1% /run
none                        5.0M     0  5.0M   0% /run/lock
none                        246M     0  246M   0% /run/shm
/dev/sda1                   228M   25M  192M  12% /boot
vagrant                     233G   92G  142G  40% /vagrant
```</p>

<p>HDD リサイズとかは、たぶん Box 定義からいじる、とかなのかな？<br/>
その辺の深追いはまた今度。<br/>
まず今日の課題はクリアで。</p>

<p><img src="http://blog.branch4.pw/images/2014/08/guestserver01_nohdd.png" alt="guestserver_hddstay" /></p>

<h2>次回予告</h2>

<p>複数サーバをぼこぼこあげるとき。</p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluentdを複数起動したい]]></title>
    <link href="http://blog.branch4.pw/blog/2014/07/22/multiprocess-with-fluentd/"/>
    <updated>2014-07-22T22:30:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/07/22/multiprocess-with-fluentd</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<hr />

<p>タイトル通りなんだけど、「fluentdを複数起動したいなー」<br/>
って、質問いただいたので、簡単に手順を書いておきまっせ。</p>

<h3>fluentdとは？</h3>

<hr />

<p>知らない人はいないね。はい。</p>

<p><a href="http://www.fluentd.org/"><img src="http://blog.branch4.pw/images/2014/07/fluentd-logo.png" alt="fluentd logo" /></a></p>

<p><a href="http://www.treasuredata.com">tresuredata</a>で開発されたオープンソースのデータコレクタですのん。<br/>
詳しいことは、<a href="http://www.fluentd.org/">fluentdのwebsite</a>にいけば大体書いてあるね。</p>

<p>この前行った、AWSSummit Tokyo2014でも、どの会社も、<br/>
「弊社では、ログはfluentdで処理しています！(ドヤ)」的な感じでした。<br/>
使うのが普通ですね、はい。</p>

<p>ちなみに僕はインストールするの今回初です(笑)<br/>
弊社では使ってるんですけどね、もう現場仕事から離れること・・・200X年くらい。</p>

<p>なのでね、今回の記事のイメージはこんな感じだけど、なんか間違って理解してたら誰か突っ込みよろ！</p>

<p><img src="http://blog.branch4.pw/images/2014/07/multiprocess.png" alt="multiprocess with fluentd" /></p>

<h3>前提</h3>

<hr />

<p>multiprocessといっても、</p>

<p><a href="https://github.com/frsyuki/fluent-plugin-multiprocess">こういうの</a><br/>
とか<br/>
<a href="http://orihubon.com/blog/2013/12/06/fluentd-multiprocess-input-plugin/">こういうの</a><br/>
とは違う意味で。</p>

<p>本当に、プロセスを別で起動したいんです！という話。<br/>
ようは、片方のプロセス止めるときに、もう一方は止めたくないんだよね、的なアレ。</p>

<!-- more -->


<p></p>

<h2>詳細</h2>

<hr />

<p>まず、fluentd自体、ubuntuだとprecise/lucidしかサポートしていないので、<br/>
binaryで入れたい方は対応osお使いください。</p>

<h3>fluentdに限らず</h3>

<hr />

<p>fluentdに限らずな話ではあるんですが、なにかしらのアプリを複数起動する、<br/>
ということ自体は、そんなに難しいことではないす。面倒な時はあるけど。</p>

<p>気をつけるのは、以下。</p>

<ul>
<li>IP address</li>
<li>port</li>
<li>other sharable resources(files/sockets)</li>
</ul>


<p>大体のアプリは、上記を専有して起動しちゃうので、それが被らないように<br/>
configをいじったりすれば概ね同時に起動して問題なす。</p>

<h3>fluentdの場合</h3>

<hr />

<p>で、fluentd@ubuntu(precise pangolin)の場合にどうやったかね、というお話。</p>

<p>まず、インストール後、今回触るファイルたちのリストは以下。</p>

<ul>
<li>/etc/init.d/td-agent</li>
<li>/etc/td-agent/td-agent.conf</li>
<li>/etc/default/td-agent</li>
</ul>


<p>それぞれ軽く解説をつけると・・・</p>

<ul>
<li>/etc/init.d/td-agent

<ul>
<li>fluentdの起動スクリプト</li>
<li>このファイルいじって、PIDファイルが被らないようにする</li>
</ul>
</li>
<li>/etc/td-agent/td-agent.conf

<ul>
<li>fluentdのconfigファイル</li>
<li>これの設定をいじって、portが被らないようにする</li>
</ul>
</li>
<li>/etc/default/td-agent

<ul>
<li>fluentdの起動オプション設定ファイル</li>
<li>これの設定をいじって、起動時に読み込むconfigを切り替える</li>
</ul>
</li>
</ul>


<p>こんな感じ。実際のところは上記の３ファイルをコピって、二つずつ作るのだ。がっはっは。</p>

<p>と、いうわけで、まずは各ファイルのコピーだけ作っておきましょ。</p>

<p><code>
% sudo cp /etc/init.d/td-agent /etc/init.d/td-agent_nginx
% sudo cp /etc/default/td-agent /etc/default/td-agent_nginx
% sudo cp /etc/td-agent/td-agent_nginx.conf /etc/td-agent/td-agent_nginx.conf
</code></p>

<p>suffinxにnginxっていれてるのは、特に意味はないす。<br/>
ただ、なんのためのfluentdなのか見分けつかなくなるようなファイル名はやめたほうがよいかと。</p>

<h3>各ファイルの詳細</h3>

<hr />

<h4>/etc/init.d/td-agent_nginx</h4>

<p>```</p>

<h1>Introduce the short server&rsquo;s name here</h1>

<p>NAME=td-agent_nginx ★ここ修正</p>

<h1>Read configuration variable file if it is present</h1>

<p>[ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME</p>

<h1>PATH should only include /usr/* if it runs after the mountnfs.sh script</h1>

<p>PATH=/sbin:/usr/sbin:/bin:/usr/bin
USER=td-agent                   # Running user
GROUP=td-agent                  # Running group
DESC=td-agent_nginx             # Introduce a short description here★ここ修正
PIDFILE=/var/run/$NAME/$NAME.pid
DAEMON=/usr/lib/fluent/ruby/bin/ruby # Introduce the server&rsquo;s location here</p>

<h1>Arguments to run the daemon with</h1>

<h1>DAEMON_ARGS=&ldquo;/usr/sbin/td-agent $DAEMON_ARGS &mdash;daemon $PIDFILE &mdash;log /var/log/td-agent/td-agent_nginx.log&rdquo; ★ここ修正</h1>

<p>DAEMON_ARGS=&ldquo;/usr/sbin/td-agent $DAEMON_ARGS $PIDFILE &mdash;log /var/log/td-agent/td-agent_nginx.log&rdquo; ★ここ修正
echo $DAEMON_ARGS
SCRIPTNAME=/etc/init.d/$NAME
START_STOP_DAEMON_ARGS=&ldquo;&rdquo;
```</p>

<h4>/etc/td-agent/td-agent_nginx.conf</h4>

<p>インストール直後のconfigっす。コメントは邪魔なのでとっぱらってます。</p>

<p>```</p>

<h3>#</h3>

<h2>Output descriptions:</h2>

<h1>#</h1>

<p><match td.*.*>
  type tdlog
  apikey YOUR_API_KEY</p>

<p>  auto_create_table
  buffer_type file
  buffer_path /var/log/td-agent_nginx/buffer/td ★ここ修正(同じログファイル握らないように)
</match></p>

<p><match debug.**>
  type stdout
</match></p>

<h3>#</h3>

<h2>Source descriptions:</h2>

<h1>#</h1>

<p><source>
  type forward
  port 25224 ★defaultだと24224になってるので、明示的に変更しておく
</source></p>

<h1>HTTP input</h1>

<p><source>
  type http
  port 18888 ★ここも明示的に変更しておく
</source></p>

<h2>live debugging agent</h2>

<p><source>
  type debug_agent
  bind 127.0.0.1
  port 25235 ★ここも明示的に変更しておく
</source>
```</p>

<h4>/etc/default/td-agent_nginx</h4>

<p>起動時につけるオプションね。<br/>
ここで読み込むconfig変更しますゆえお忘れなく。</p>

<p>```</p>

<h1>This file is sourced by /bin/sh from /etc/init.d/td-agent</h1>

<h1>Options to pass to td-agent</h1>

<p>DAEMON_ARGS=&ldquo;&mdash;config /etc/td-agent/td-agent_nginx.conf&rdquo; ★これ追記。違う設定ファイル読み込むように
```</p>

<p>このくらい修正をかけると、だ、下記コマンドで動くはず、だ。<br/>
<code>
% sudo /etc/init.d/td-agent start
% sudo /etc/init.d/td-agent_nginx start
% ps aux|grep td-agent
td-agent 11314  0.0  3.5  98888 17912 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --daemon /var/run/td-agent/td-agent.pid --log /var/log/td-agent/td-agent.log
td-agent 11317  2.4  5.2 125704 26260 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --daemon /var/run/td-agent/td-agent.pid --log /var/log/td-agent/td-agent.log
td-agent 11348  0.0  3.5  98888 17908 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --config /etc/td-agent/td-agent_nginx.conf --daemon /var/run/td-agent_nginx/td-agent_nginx.pid --log /var/log/td-agent/td-agent_nginx.log
td-agent 11351  5.5  5.2 125704 26224 ?        Sl   07:05   0:00 /usr/lib/fluent/ruby/bin/ruby /usr/sbin/td-agent --config /etc/td-agent/td-agent_nginx.conf --daemon /var/run/td-agent_nginx/td-agent_nginx.pid --log /var/log/td-agent/td-agent_nginx.log
</code></p>

<p>ぱちぱちぱちぱちーーー。いやまぁそらそーだ。<br/>
で、ここまでは結構すぐいきましたわい。ところが、、、、</p>

<p><code>
% sudo /etc/init.d/td-agent stop
</code></p>

<p>つって、止めようとすると、、、なんと！両方のプロセスが止まる！<br/>
ひぎぃ・・・・/etc/init.d/td-agentの中身としばらくにらめっこ。</p>

<p>debian系のinit scriptの中では、start-stop-daemonってのがdaemonの起動・停止に<br/>
まつわるetc をやっていて、そのあたりをちょっと調べてみることに。</p>

<ul>
<li>fluentdのdo_stopでは、２回start-stop-daemonが呼ばれている

<ul>
<li>1回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;retry=TERM/30/KILL/5 &mdash;pidfile $PIDFILE &mdash;name ruby</li>
<li>2回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;oknodo &mdash;retry=TERM/30/KILL/5 &mdash;exec $DAEMON</li>
</ul>
</li>
</ul>


<p>と、いうのと、man start-stop-daemonの中身をみると。。。</p>

<p>```
Note: unless &mdash;pidfile is specified, start-stop-daemon behaves similar to killall(1).
start-stop-daemon will scan the process table looking for any processes which match
the process name, uid, and/or gid (if specified).</p>

<p>Any matching process will prevent &mdash;start from starting the daemon. All matching processes
will be sent the TERM signal (or the one specified via &mdash;signal or &mdash;retry)
if &mdash;stop is specified.</p>

<p>For  daemons  which  have  long-lived children which need to live through a &mdash;stop,
you must specify a pidfile.
```</p>

<p>つまり・・・&mdash;pidfileオプションが指定されてなければ、killallと同じように動く、と・・・<br/>
おお・・・そりゃ両方のプロセス殺されるわけだ・・・<br/>
逆に言えば、&mdash;pidfileを指定しとけばkillの動作なのかな・・・</p>

<p>で、straceかけて、2パターン検証してみたYO。</p>

<h4>1回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;retry=TERM/30/KILL/5 &mdash;pidfile $PIDFILE &mdash;name ruby</h4>

<p>やってることは、</p>

<ol>
<li>$PIDFILEの中のprocessidをとってくる(ここでは、$PIDとしよう)</li>
<li>/proc/$PID/statが存在するか確認する</li>
<li>存在しない場合は、終わり</li>
<li>存在する場合は、3へ</li>
<li>killする</li>
<li>2に戻る</li>
</ol>


<p>をひたすら繰り返しております。<br/>
なんで、基本的にはkillと同じ動きなのかな。retry付きで。</p>

<h4>2回目: start-stop-daemon &mdash;stop &mdash;quiet &mdash;oknodo &mdash;retry=TERM/30/KILL/5 &mdash;exec $DAEMON</h4>

<p>こっちは、まじkillallだったわ。</p>

<ol>
<li>/proc/&lt;全ProcessのPID>/exe のsymbolic link先 == $DAEMON か確認</li>
<li>同じだったprocessにkillでsignal送信</li>
<li>同じのがなくなるまで1と2を繰り返す</li>
</ol>


<p>killall。<br/>
で、問題は、なんでこれを使う必要があるか・・・。<br/>
きっと、本体殺しても、まだ生き残ってるプロセスがいる可能性があるから、<br/>
なんだろうな・・・</p>

<p>そこまでプロセスわけた上でやろうとすると、ちょいと今今時間がないので、<br/>
一旦、各プロセスの本体を殺すinit scriptを書いてみたです。<br/>
普通にkillコマンドで書いてます。start-stop-daemon、まだ使いこなせまてん。</p>

<p>送るsignalは、<a href="http://docs.fluentd.org/articles/signals">ここ</a>に書いてあったので、INT/TERM。<br/>
今回はINTでお送りいたします。</p>

<p>/etc/init.d/td-agentの、do_stopを下記に書き換えてもらって、それコピーして、<br/>
/etc/init.d/td-agent_nginxつくってもらえれば、それぞれに殺すことができまっせ。</p>

<p>```
#</p>

<h1>Function that stops the daemon/service</h1>

<p>#
do_stop()
{</p>

<pre><code># Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
PID=`cat $PIDFILE`
kill -INT $PID
RETVAL="$?"
if [ $RETVAL -ne 0 ]; then
    RETVAL="2"
fi

ps aux | grep $PIDFILE &gt;/dev/null 2&gt;&amp;1
RETVAL="$?"
if [ $RETVAL -eq 0 ]; then
    rm -f $PIDFILE
    return "$RETVAL"
fi

return "2"
</code></pre>

<p>}
```</p>

<h3>終わりに</h3>

<hr />

<p>これでなんか問題出たら、他のプロセスも殺せるように改変しようかな。<br/>
(ご利用は各自の責任においてお願いします。Use at your own risk.)</p>

<p>たぶん、改変自体は、ループ回して、待つ作戦＋ps 結果をgrepしてプロセス毎の<br/>
PID取得する作戦かなー。</p>

<p>ま、一旦はこれである程度まではいけるので、ブログはここまでで。</p>

<p><a href="http://c.af.moshimo.com/af/c/click?a_id=442315&p_id=170&pc_id=185&pl_id=4157&guid=ON" target="_blank"><img src="http://image.moshimo.com/af-img/0068/000000004157.gif" width="300" height="250" style="border:none;"></a><img src="http://i.af.moshimo.com/af/i/impression?a_id=442315&p_id=170&pc_id=185&pl_id=4157" width="1" height="1" style="border:none;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Web Development] Sending Post Request With Google Chrome]]></title>
    <link href="http://blog.branch4.pw/blog/2014/04/10/web-development-sending-post-request/"/>
    <updated>2014-04-10T15:01:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/04/10/web-development-sending-post-request</id>
    <content type="html"><![CDATA[<div  class=post>
  <h3 >
    Purpose of the entry
  </h3>
  It's just an introduction of the tool I use for debugging purpose.  <br> 
  I use it to check my APIs.  <br>
  It can POST/GET/PUT/DELETE...send data in various HTTP method to any API.  <br><br>
  <!-- more -->
  <h3 >
    Introduction
  </h3>
  Debugging APIs ?  <br>
  It's easy to debug using 
  <a  href=https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm>Postman REST client</a>.  <br> <br>
  Screenshot below.  <br>
  You need to set required HTTP method/parameters/URL etc...  <br>
  Then press send.  <br>
  <div  class=separator style=clear: both; text-align: center;>
    <a  href=http://1.bp.blogspot.com/-rl2WgUmISw4/U0YoBYabGYI/AAAAAAAAAx0/47qAmNS_uRw/s1600/%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8215.png imageanchor=1 style=margin-left: 1em; margin-right: 1em;><img border="0" src="http://1.bp.blogspot.com/-rl2WgUmISw4/U0YoBYabGYI/AAAAAAAAAx0/47qAmNS_uRw/s320/%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8215.png"></a>
  </div>
  <br> <br>
  The response will be output below the settings part.  <br> <br>
  <div  class=separator style=clear: both; text-align: center;>
    <a  href=http://3.bp.blogspot.com/-PhwS70ZCcwI/U0Yn8MpaRAI/AAAAAAAAAxs/ANsKcNfrZSQ/s1600/%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8216.png imageanchor=1 style=margin-left: 1em; margin-right: 1em;><img border="0" src="http://3.bp.blogspot.com/-PhwS70ZCcwI/U0Yn8MpaRAI/AAAAAAAAAxs/ANsKcNfrZSQ/s320/%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8216.png"></a>
  </div>
  <br> <br>
  Easy.  <br> <br>
  <br>
</div>

]]></content>
  </entry>
  
</feed>
