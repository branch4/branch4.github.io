<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DynamoDB | branch4 Blog]]></title>
  <link href="http://blog.branch4.pw/blog/categories/dynamodb/atom.xml" rel="self"/>
  <link href="http://blog.branch4.pw/"/>
  <updated>2014-08-31T23:16:56+09:00</updated>
  <id>http://blog.branch4.pw/</id>
  <author>
    <name><![CDATA[root4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DynamoDBの本番とテスト環境の分け方]]></title>
    <link href="http://blog.branch4.pw/blog/2014/08/15/dynamodb-test-production-env/"/>
    <updated>2014-08-15T01:30:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/08/15/dynamodb-test-production-env</id>
    <content type="html"><![CDATA[<p>はい、こんばんみー。最近カレーにますますハマってる<a href="http://diary.risterlab.com">risterlab</a>です。<br/>
南インドより北インドカレー派ってことが最近わかりました。<br/>
もはやナンいらなくてカレーだけでも飲めます。うそです。チャパティ派です。</p>

<p>戯言はその辺にして、今回はDynamoDBでの本番環境とテスト環境の分け方を。<br/>
<img src="http://blog.branch4.pw/images/2014/08/test_products_dynamodb.jpg" alt="test-and-production-dynamodb" /><br/>
photo credit: <a href="https://www.flickr.com/photos/thepreiserproject/12148182186/">The Preiser Project</a> via <a href="http://photopin.com">photopin</a> <a href="http://creativecommons.org/licenses/by/2.0/">cc</a></p>

<p>うちではテスト環境としてDynamoが使えるかは下記２つの条件がありました。</p>

<ol>
<li>同じテーブル名のものを複数作成できること</li>
<li>テスト環境へのクエリが本番環境へ発行されてしまう危険性がない、またはとても低いこと</li>
</ol>


<!-- more -->


<p></p>

<h3>同じテーブル名を複数つくるには</h3>

<hr />

<p>これがDynamoDBでは意外にやっかい。<br/>
結論申しますと、同じテーブル名については、別リージョンという制限付きで可能。</p>

<p>オンプレだと本番DBとテストDBは大体違う筐体、DB、スキーマにのってるからテーブル名は同じにできるんだけど<br/>
DynamoDBの場合は<br/>
１つのリージョンが１つのDBで、AWSのアカウントがスキーマ。<br/>
というイメージだとわかりやすい。<br/>
つまりAWSのあるアカウントでTokyoリージョンにDynamoDBのテーブルを作るということは<br/>
ひとつのDBのあるスキーマ内にテーブルを作るということ。</p>

<p>つまりもちろん同じテーブル名はだめですね。<br/>
じゃあ別のアカウントにするかって、そんなにアカウント作りたくないし、それは現実的ではなし。<br/>
一番簡単なのはリージョンを変えることでしょう。</p>

<p>本番をもちろん東京に。テストは適当に一番安いVirginiaってのがよい。</p>

<table>
<thead>
<tr>
<th align="center">AWSアカウントID </th>
<th align="center"> リージョン </th>
<th align="center"> テーブル     </th>
<th align="center"> 環境</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">432156781234    </td>
<td align="center"> TOKYO      </td>
<td align="center"> TBL_HOGEHOGE </td>
<td align="center"> 本番</td>
</tr>
<tr>
<td align="center">432156781234    </td>
<td align="center"> VIRGINA    </td>
<td align="center"> TBL_HOGEHOGE </td>
<td align="center"> テスト</td>
</tr>
</tbody>
</table>


<p>これでそれぞれのスループット数を設定すればOK</p>

<h3>本番とテストのアクセス制限</h3>

<hr />

<p>DynamoDBへのアクセスにはリソースネーム（ARN）を使います。<br/>
たとえばこんなの。<br/>
<code>arn:aws:dynamodb:us-east-1:432156781234:table/TBL_HOGEHOGE</code></p>

<p>これにはリージョンが含まれているから、アクセス先の設定ミスなど人為的なミスを除けば、間違える危険性は低い。<br/>
とはいえ、その人為的ミスが起こっちゃう訳ですね。<br/>
だからそもそもアクセス制限をしたいところですが、そこで使うのがIAM。</p>

<p>IAMでアプリが使うユーザーをテスト用と本番用で作って<br/>
そこでさっきのリソースネームを使ってアクセス制限をかけましょう。<br/>
そうすれば、さらにACCESSKEYとSECRETKEYがそれぞれ違うので、<br/>
本当に最初のKEYの設定さえ間違えなければ、アプリが間違えて本番用のARNで本番用のテーブルに繋ごうとしても、権限なしではじいてくれるというわけです。</p>

<p>IAMで設定するDynamoDBのPolicyはこんな感じ。<br/>
さっきの表の例でいくと</p>

<h5>テスト用のユーザーにつけるPolicy　　</h5>

<p>```
{
  &ldquo;Version&rdquo;: &ldquo;2012-10-17&rdquo;,
  &ldquo;Statement&rdquo;: [</p>

<pre><code>{
  "Sid": "Stmt1399538126123",
  "Effect": "Allow",
  "Action": [
    "dynamodb:BatchGetItem",
    "dynamodb:BatchWriteItem",
    "dynamodb:CreateTable",
    "dynamodb:DeleteItem",
    "dynamodb:DescribeTable",
    "dynamodb:GetItem",
    "dynamodb:ListTables",
    "dynamodb:PutItem",
    "dynamodb:Query",
    "dynamodb:Scan",
    "dynamodb:UpdateItem",
    "dynamodb:UpdateTable"
  ],
  "Resource": [
    "arn:aws:dynamodb:us-east-1: 432156781234:table/TBL_HOGEHOGE"
  ]
}
</code></pre>

<p>  ]
}
```</p>

<h5>本番用のユーザーにつけるPolicy　　</h5>

<p>```
{
  &ldquo;Version&rdquo;: &ldquo;2012-10-17&rdquo;,
  &ldquo;Statement&rdquo;: [</p>

<pre><code>{
  "Sid": "Stmt1399538126123",
  "Effect": "Allow",
  "Action": [
    "dynamodb:BatchGetItem",
    "dynamodb:BatchWriteItem",
    "dynamodb:CreateTable",
    "dynamodb:DeleteItem",
    "dynamodb:DescribeTable",
    "dynamodb:GetItem",
    "dynamodb:ListTables",
    "dynamodb:PutItem",
    "dynamodb:Query",
    "dynamodb:Scan",
    "dynamodb:UpdateItem",
    "dynamodb:UpdateTable"
  ],
  "Resource": [
    "arn:aws:dynamodb:ap-northeast-1: 432156781234:table/TBL_HOGEHOGE"
  ]
}
</code></pre>

<p>  ]
}
```</p>

<h3>まとめ</h3>

<hr />

<p>DynamoDBでテスト環境と本番環境を作る時、<br/>
下記のようにすればよし。</p>

<ol>
<li>同じテーブル名を複数作成する<br/>
別リージョンで同名のテーブルを作成することが可能。</li>
<li>テスト環境へのクエリが本番環境へ発行されてしまわないようにする<br/>
ARNだけの区別では不十分。<br/>
ユーザーをわけてIAMでPolicyを設定しアクセス制限をすべし。  　</li>
</ol>


<p>もちろん性能評価とか負荷試験には別リージョンのテスト環境は使ってはだめですよ。レイテンシー違いますからね。</p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>



]]></content>
  </entry>
  
</feed>
