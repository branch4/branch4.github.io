<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | branch4 Blog]]></title>
  <link href="http://blog.branch4.pw/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.branch4.pw/"/>
  <updated>2014-07-27T15:08:49+09:00</updated>
  <id>http://blog.branch4.pw/</id>
  <author>
    <name><![CDATA[root4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First RSpec With Rails]]></title>
    <link href="http://blog.branch4.pw/blog/2014/07/27/first-rspec-with-rails/"/>
    <updated>2014-07-27T14:29:18+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/07/27/first-rspec-with-rails</id>
    <content type="html"><![CDATA[<p>こんにちは。adorechicです。
まわりでRailsデビューした人が何人かいるのですが、
「テストどうすりゃいいんだ」「RSpecわからん」
といった歓喜の声があがっているため、はじめてそのへんを触る人がざっくり雰囲気がつかめるようなエントリを書いてみます。
RSpecのセットアップとかそういうのは書きません。</p>

<!-- more -->


<h1>specの種類</h1>

<p>specと一口に言ってもいろいろな種類があります。</p>

<ul>
<li>controller spec</li>
<li>model spec</li>
<li>view spec</li>
<li>routing spec</li>
<li>helper spec</li>
<li>request spec</li>
<li>feature spec</li>
</ul>


<p>まずこれどういう違いがあるのかーとかわからないですね。
モデルとかのテストは良いとしても、controller specとrequest specってどっちも「あるアクション」に「GETリクエスト」みたいなリクエストがとんで「どうなる」というのをテストしているように見えて、何が違うねんとかあると思います。</p>

<p>それぞれどういう違いがあるのかざっくり解説。
の前に。</p>

<h1>テストって何をテストするのか</h1>

<p>原則として、</p>

<ul>
<li>テストの対象（主題）に対して</li>
<li>ある「入力」を与えたとき</li>
<li>どういった「出力」が得られるか</li>
</ul>


<p>これが基本です。これが全てです。
といいたいところですがステートレスにはなりきれないところもあるわけで。
必要に応じて、</p>

<ul>
<li>どういった「内部変化」があるか</li>
</ul>


<p>も見ます。
ただしこの内部変化はいたずらにチェックすればよいわけではないです。
ありがちなのが、テスト対象の実装に依存したテストを書いてしまうこと。</p>

<p>例えば最終的に「このレコードが保存されること」が確認できればよいのに、別の「このメソッドが呼び出されていること」とかを無闇にテストしてしまったりします。
そういうテストは実装が変わったときに大量にfailして、テスト書き直すはめになるという壊れやすいテストになってしまいます。これでは本末転倒です。</p>

<p>あくまでテストは対象のインターフェイスに対して行います。</p>

<p>この辺の話に興味ある場合は<a href="https://speakerdeck.com/skmetz/magic-tricks-of-testing-railsconf">これ</a>とかオススメ。</p>

<p>ということで何が「入力」で何が「出力」なのかをおさえると、それぞれのspecの役割がとりやすいと思います。</p>

<h1>specの種類</h1>

<p>本題。</p>

<h2>controller spec</h2>

<p>対象はコントローラー、と特定のアクション。</p>

<p>勘違いしやすいところですが、「入力」はHTTPリクエストまんまではありません。
paramsなどを入力としてactionメソッドが呼び出されているととらえた方がやりやすいと思います。</p>

<p>同様に「出力」もHTTPレスポンスではありません。
よくあるのが、response bodyのhtmlとかをチェックしてしまうこと。
単体テストとして考えるとそれはviewの責務なので、controllerの責務ではないのです。</p>

<p>対象のactionに、あるパラメータがわたされて、その結果200が返る、404が返る、リダイレクトされる・・・とか、その処理であるレコードが作成されるとかそういうのを見ます。</p>

<h2>model spec</h2>

<p>モデルに対するspec。なんかデータ作って保存したり検索したりするようなメソッドをテストします。
いわゆるよくある単体テストっぽいのでわりとわかりやすいんですが、やりがちなのはrailsの機能までテストしてしまうこと。validate presenceのような、デフォルトで用意されているrailsのvalidatorの機能までテストする必要はないです。
たとえばcontextによって発動するvalidatorが違うとか、そういう複雑なことをするときだけ。</p>

<h2>view spec</h2>

<p>ビューをテストするもの。コントローラーの処理後、必要な変数がアサインされた前提で、どういったものがレンダリングされるか、という観点。</p>

<h2>routing spec</h2>

<p>railsのroutingをテストするもの。結構複雑なrouting書いたりすると、このURLできたときどのアクションにふられるのかとかぱっと見わからないときとかも便利。</p>

<h2>helper spec</h2>

<p>実は一番わかりやすいかもしれない。railsのhelperに対するテスト。helperって基本入力とか条件に対してタグだったり文字列を整形して出すようなユースケースが多いので、一番入力と出力がわかりやすい。</p>

<h2>request spec</h2>

<p>request specとfeature specは一応Integration testと呼ばれるものに属します。ただIntegration testってコンテキストによってちょっと意味合いが違ってくるのですが、ここではrailsアプリケーションとして通してるというぐらい。request specの入出力はHTTPリクエスト・レスポンス。REST APIに対するテストに向いている。一方でfeature specは画面操作。普通にブラウザでアクセスして、何かボタンをクリックするとどうなる、というのをテストする。</p>

<p>feature specでは、controller specなどと違いDBの状態がどうなった、とかリダイレクト先のURLがどうだというようなことはあまりみません。だってブラウザで操作してて見えないから。登録ボタンおしたら、画面の要素が増えたねーみたいにチェックしていきます。</p>

<h1>どの種類のテストをどこまで書くのか</h1>

<p>まずmodel specでいろいろテスト書いたんだけれども、それを呼び出すcontroller specでも同じようなテスト書いてくとすごい重複してないか、という疑問。
これも、入出力がどう違うのかという意識で書いていくとやりやすいと思います。</p>

<p>例えばmodelのメソッドは、そのときのレコードの状態や、わたされるパラメータによっていろいろなコンテキストがあって、それごとにテストを書いたとしましょう。
しかしその結果の出力としてのケースはそれほど多くないのではないでしょうか。成功してレコードが保存される、失敗してエラーが返るぐらい。
であれば結果として呼び出し側としては2ケースしかない。であればcontroller specではその2ケースのテストを書く、というイメージです。</p>

<h1>specいろいろ種類あったけど、全部書くの？</h1>

<p>全部書く必要はないです。必要なものだけ書けば良い。</p>

<p>これはそのアプリケーションで必要とする要件であったり、チームの開発スタイルとかにかなり依存してくるところなので一概にいえないところですが、
たとえば基本的なresourcesとかによるroutingしかないのであれば、頑張ってrouting spec書かなくてもよいと思います。</p>

<p>viewにすごいこだわりを持っていたり、複雑なviewを持っているアプリケーションであれば、view specしっかり書くとよいし、
そこまでではなく普通に操作できればよいやーぐらいであればfeature specがあればよさそう。</p>

<p>逆にそういう前提にこだわらず、不安なところは普段書かないやつでも書いた方がよいです。</p>

<p>よく書かれるのはmodel, controller, feature/request specあたりでしょうか。</p>

<h1>まとめ</h1>

<p>テストに正解はありません。</p>

<p>テストはそのアプリケーションが価値を生み出す手助けをするものです。
新しく追加したコードが既存の機能を壊していないことを確かめるために用いられることもあるし、開発者が開発を進める上での手助けをするために用いられることもあります。</p>

<p>どういった目的で、どんな場面でテストを書くのかによって書き方はもちろん、ツール自体使い分けた方がよい場合もあります。</p>

<p>また開発スタイルや対象とするアプリケーションの性質によっても異なります。ぶっちゃけ好みです。
RailsプロジェクトではRSpecが多いような感じがしますが、お膝元のBasecampではtest/unitらしい。</p>

<p>複雑な機能を作るときに、contextを分けながら考えを整理してから実装入るとやりやすかったりするし、
逆にインターフェイスレベルでいろいろ試行錯誤しながら開発するときは最初からきっちり書いてると開発効率を落としてしまったりします。</p>

<p>とはいえ慣れないうちはたくさん書くのが良いと思います。</p>
]]></content>
  </entry>
  
</feed>
