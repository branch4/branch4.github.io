<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Provisioning | branch4 Blog]]></title>
  <link href="http://blog.branch4.pw/blog/categories/provisioning/atom.xml" rel="self"/>
  <link href="http://blog.branch4.pw/"/>
  <updated>2014-10-13T14:19:30+09:00</updated>
  <id>http://blog.branch4.pw/</id>
  <author>
    <name><![CDATA[root4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansible入門 - Playbookを使ってみる -]]></title>
    <link href="http://blog.branch4.pw/blog/2014/10/13/ansible-for-beginners-playbook/"/>
    <updated>2014-10-13T05:00:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/10/13/ansible-for-beginners-playbook</id>
    <content type="html"><![CDATA[<p>またしても Ansible エントリでございます。<a href="https://twitter.com/xengineer01">@xengineer01</a>です。</p>

<p><img src="http://blog.branch4.pw/images/2014/10/ansible_wordlogo_black.png" alt="ansible logo" /></p>

<p>ansible の基本的なとことか、ansible の ad-hoc mode については、
<a href="http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners/">以前の記事</a>
をみていただきまして・・・</p>

<p>今日は、ansible で playbook 使ってってみようかね。<br/>
include とか、vars とか、role とか沢山便利機能があるけど、<br/>
今回は playbook を使う！以上のことはしませぬ。<br/>
なぜなら僕は ansible 初級。</p>

<h2>ざっくりagenda</h2>

<ol>
<li>システム構成

<ul>
<li>今回の検証環境のシステム構成紹介</li>
</ul>
</li>
<li>Ansible playbookについて

<ul>
<li>簡単に紹介</li>
</ul>
</li>
<li>やってること詳細

<ul>
<li>今回やったことの詳細</li>
</ul>
</li>
</ol>


<p>こんな感じ。</p>

<!-- more -->


<p></p>

<h2>写真紹介</h2>

<p>まずは、いつも通り唐突ながら、なべちゃんの写真紹介。<br/>
いつもいい写真撮るんですよね。今回は秩父にある名もない滝だそうです。</p>

<p><img src="http://blog.branch4.pw/images/2014/10/nabechan03_chichibu.jpeg" alt="nabechan chihibu" /><br/>
※ Hiroyuki Watanabeの写真で、<a href="http://my-eyes.net/">http://my-eyes.net/</a>に元があります。</p>

<p>では本題に・・・</p>

<h2>システム構成</h2>

<hr />

<p>今回も、vagrant 使って、下記構成を作って使ってみました。
今回も、vagrant + ansible の連携とか、vagrantの設定まで踏み込んでいくつもりはなく、
いつでも検証自体を再現できるように使ってるだけです。<br/>
あ、あと、packageのインストール的なのは今回はansibleではなくvagrantでやってます。
この辺は後述するけど、思想の問題。</p>

<p><img src="http://blog.branch4.pw/images/2014/10/ansible_wordpress_system.png" alt="wordpress" /></p>

<p>ざっくり、こんなシステム作りまっせ。
デフォ設定んとこはなんも書いてなし。MySQLも、言語設定追記してる程度なので
構成図上はなんも記載してないす。</p>

<p>WordPressは、Wordpressを、git clone/git checkout refs/tags/xxxxして
nginxのrootに格納するのと、 pluginのインストールまで。</p>

<h3>環境について</h3>

<p><code>
$ cat /etc/issue
Ubuntu 12.04 LTS \n \l
$ ansible-playbook --version
ansible-playbook 1.7.2
</code></p>

<h2>Ansible playbookについて</h2>

<p><a href="http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners/">以前の記事</a>
では、ad-hoc mode つって、対象サーバ上で実行したいことを一つずつコマンドとして
実行していく形式を紹介しましたよ、と。</p>

<p>でもそれだと明らかに毎回沢山打ち込まないといけなくて面倒なので、
設定ファイルに起こして実行できるようにしましょう。としてるとこの
設定ファイルの部分が playbook ですよ。<br/>
なので、対象サーバに対して実施したいことを書いておくファイルのことです。</p>

<p>Playbookを使った場合の ansible の挙動のざっくりイメージ図を以下に！</p>

<p><img src="http://blog.branch4.pw/images/2014/10/ansible_playbook_image.png" alt="ansible-playbook image" /></p>

<p>ad-hoc mode で書いたときとほとんど変わっていないのは内緒。
Modules が Playbook に、ansible が ansible-playbook になっただけです。
しかも、実際のところは Modules も呼び出されるから、
なんかちょっと違うんだけど。なんとなくなイメージだから。</p>

<h2>やってること詳細</h2>

<h3>各種install/configurationの分類</h3>

<p>前述したけど、packageのインストールにはvagrant使ってるよ、ということもあるので、
何をvagrantでやってて、なにをansibleでやってんだい、ってのを書いておきましょ。</p>

<ul>
<li>Vagrant でやってること

<ul>
<li>Update package repositories</li>
<li>Install many packages</li>
<li>Create user/group

<ul>
<li>ansible/ansible</li>
</ul>
</li>
<li>Set authorized_keys</li>
<li>Execute ansible</li>
</ul>
</li>
<li>ansible でやってること

<ul>
<li>nginxの設定</li>
<li>php/php-fpmの設定</li>
<li>MySQLの設定</li>
<li>MySQLのユーザ作成</li>
<li>Wordpress の checkout とインストール</li>
<li>Wordpress plugin の インストール</li>
<li>Wordpressの設定</li>
<li>nginx/php-fpm/mysql の再起動</li>
</ul>
</li>
</ul>


<p>つまり、package のインストールとか、ansible の設定関係は全部 vagrant でやってて、
Wordpress の実行環境に必要な設定系は全部 ansibleでやってるよ、と。</p>

<p>packageのインストールは時間かかるし、頭に一回だけ走らせればいいので、
vagrant 側でお世話しようと思った次第で。ansible とか chef 的なものは、
何度も何度も実行すると思うので、</p>

<ul>
<li>何かのインストールみたいな時間がかかる処理</li>
<li>何かの設定みたいな時間がかからない処理</li>
<li>ユーザ作成的な単発の処理</li>
</ul>


<p>などなど種別を考えて、どこに記述すんのか分けたほうがええべよ。
(僕はそうしたいだけ)</p>

<p>今回は、とりあえずさっき書いた感じにわけてみた。
なので、ここから ansible の playbook だけ引っこ抜いて実行しても
全然 Wordpress は動きません。</p>

<h3>各種ansisble設定解説</h3>

<hr />

<p>まずは、vagrant 関連のファイルを git clone しておきます。
さすがにペタペタ貼って動作確認するの面倒な量になってきたので github にあげたわい。</p>

<p><code>
$ git clone https://github.com/xengineer/ansible_playbooks.git
</code></p>

<p>これ clone して、vagrant up すると、きっとすぐに Wordpress 使えるようになるはず。
でもそれは重要ではなく、今回は解説が重要である。</p>

<p>なので、以下諸々解説。なお、解説は全部 ansible の解説となっております。
vagrant の解説もしはじめるとながーくなるので、vagrant については、</p>

<p><a href="http://blog.branch4.pw/blog/2014/08/07/setup-test-environment-with-vagrant/">ここ</a>とか、
<a href="http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2/">ここ</a>を
参照くださいませ。</p>

<p>vagrant up後、wordpress02 っていうインスタンスができてるので、
そこに vagrant ssh して、仮想インスタンスの中と合わせて
下記を眺めてもらえるとわかりやすいよ。
(ファイルのパスとかは全部仮想インスタンスにあわせて書いてるので)</p>

<h3>config 格納場所</h3>

<p>ansible 自体の config は、/etc/ansible 配下にまとめて格納してあるので、
tree するとこんな感じ。
(tree はインストールしてないので、sudo apt-get install tree してちょ)</p>

<p><code>``
$ tree  /etc/ansible/
/etc/ansible/
|-- ansible.cfg
|-- hosts
</code>&mdash; playbooks</p>

<pre><code>`-- wordpress
    `-- wordpress-playbook.yml
</code></pre>

<p>```</p>

<p>各ファイルを説明すると、</p>

<ul>
<li>ansible.cfg

<ul>
<li>ansible 自体の挙動の設定</li>
<li><a href="http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners/">以前の記事</a>参照</li>
</ul>
</li>
<li>hosts

<ul>
<li>上のほうのざっくりイメージ図上でいうところの、Inventory file</li>
<li>ようは設定対象サーバを指定するファイル</li>
<li><a href="http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners/">以前の記事</a>参照</li>
</ul>
</li>
<li>wordpress-playbook.yml

<ul>
<li>今回作った playbook ファイル</li>
<li>今回メインで説明するやつ</li>
<li>ファイル名はなんでもいいよ</li>
</ul>
</li>
</ul>


<p>という感じ。</p>

<h3>wordpress-playbook.yml</h3>

<p>さて、今回作ったのはこれ一つ。本来は、色んな便利機能があって、もっとわかりやすく、
簡単に書けたりもするんだけど、それについてのお勉強は次回以降ってことで。
今回は愚直にひたすら書いてみるのね。</p>

<p>勝海舟さんもこういっております。</p>

<p><strong>&ldquo;事を成し遂げる者は、愚直であれ、才走ってはならない。&rdquo;</strong></p>

<p>問題ない。持ってたらもう走っている。<br/>
菜箸くらいは台所にあるけどね。</p>

<p>で、下記が今回書いた playbook。どん！</p>

<p>```
$ cat /etc/ansible/playbooks/wordpress/wordpress-playbook.yml
&ndash; name: Configure/install applications needed to run wordpress(nginx/php/php-fpm/mysql/wordpress)
  hosts: web
  sudo: yes
  tasks:
  &ndash; name: Setup nginx.conf file</p>

<pre><code>template: src=/vagrant/conf/nginx/nginx.conf
          dest=/etc/nginx/nginx.conf
</code></pre>

<ul>
<li>name: Setup fastcgi_params file
template: src=/vagrant/conf/nginx/fastcgi_params
          dest=/etc/nginx/fastcgi_params</li>
<li>name: Setup nginx virtualhost config file for wordpress
template: src=/vagrant/conf/nginx/sites-available/wordpress
          dest=/etc/nginx/sites-available/wordpress</li>
<li>name: remove default nginx site
file:     path=/etc/nginx/sites-enabled/default
          state=absent</li>
<li>name: remove default php-fpm site
file:     path=/etc/php5/fpm/pool.d/www.conf
          state=absent</li>
<li>name: Setup nginx virtualhost symbolic link for wordpress
file:     src=/etc/nginx/sites-available/wordpress
          dest=/etc/nginx/sites-enabled/wordpress
          state=link</li>
<li>name: Create nginx root directory for wordpress
file:     path=/var/www/paralympics
          state=directory</li>
<li>name: Setup php-fpm.conf file
template: src=/vagrant/conf/php5/fpm/php-fpm.conf
          dest=/etc/php5/fpm/php-fpm.conf</li>
<li>name: Setup php.ini
template: src=/vagrant/conf/php5/fpm/php.ini
          dest=/etc/php5/fpm/php.ini</li>
<li>name: Setup fpm pool config file for wordpress
template: src=/vagrant/conf/php5/fpm/pool.d/wordpress.conf
          dest=/etc/php5/fpm/pool.d/wordpress.conf</li>
<li>name: Create php5-fpm socket file directory
file:     path=/var/run/php5-fpm/
          state=directory owner=www-data group=www-data</li>
<li><p>name: Create php5-fpm log directory
file:     path=/var/log/php5-fpm/log/
          state=directory</p></li>
<li><p>name: Configure database server
hosts: db
sudo: yes
tasks:</p>

<ul>
<li>name: Setup mysql
template: src=/vagrant/conf/mysql/my.cnf
          dest=/etc/mysql/my.cnf</li>
<li>name: Add user &lsquo;wp-user&rsquo; to mysql
mysql_user: name=wp-user password=&ldquo;&rdquo;</li>
</ul>
</li>
<li><p>name: Configure wordpress
hosts: wordpress
sudo: yes
handlers:</p>

<ul>
<li>name: stop apache2
service: name=apache2 state=stopped</li>
<li>name: restart nginx
service: name=nginx state=restarted</li>
<li>name: restart php5-fpm
service: name=php5-fpm state=restarted</li>
<li>name: restart mysql
service: name=mysql state=restarted
tasks:</li>
<li>name: Create wordpress config directory
file: path=/etc/wordpress/ state=directory</li>
<li>name: Setup wordpress
git: repo=git://github.com/WordPress/WordPress.git
     dest=~/downloads/
     version=4.0
     accept_hostkey=yes
sudo: no</li>
<li>name: Download wordpress plugin staticpress
git: repo=<a href="https://github.com/megumiteam/staticpress">https://github.com/megumiteam/staticpress</a>
     dest=~/downloads/wp-content/plugins/staticpress
     accept_hostkey=yes
sudo: no</li>
<li>name: Download wordpress plugin The Event Calendar
get_url: url=<a href="https://downloads.wordpress.org/plugin/the-events-calendar.3.8.zip">https://downloads.wordpress.org/plugin/the-events-calendar.3.8.zip</a> dest=/tmp/</li>
<li>name: Unzip the-events-calendar plugin
shell: unzip -o /tmp/the-events-calendar.3.8.zip -d ~/downloads/wp-content/plugins/
sudo: no</li>
<li>name: Fetch random salts for Wordpress config
local_action: command curl <a href="https://api.wordpress.org/secret-key/1.1/salt/">https://api.wordpress.org/secret-key/1.1/salt/</a>
register: &ldquo;wp_salt&rdquo;
sudo: no</li>
<li>name: Create Wordpress database
mysql_db: name=mywp_db state=present</li>
<li>name: Create Wordpress database user
mysql_user: name=wp-user password=&ldquo;&rdquo;
            priv=<em>.</em>:SELECT,INSERT,UPDATE,DELETE,CREATE,ALTER,DROP,INDEX
            host=&lsquo;localhost&rsquo; state=present</li>
<li>name: Copy Wordpress config file
template: src=/vagrant/conf/wp-config.php dest=/etc/wordpress/</li>
<li>name: Install wordpress files to nginx root directory for wordpress
synchronize: src=~/downloads/
             dest=/var/www/paralympics/
             recursive=yes</li>
<li>name: Change ownership of Wordpress installation
file: path=/var/www/paralympics/ owner=www-data group=www-data state=directory recurse=yes
notify:

<ul>
<li>stop apache2</li>
<li>restart mysql</li>
<li>restart nginx</li>
<li>restart php5-fpm
```</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>な、ながい・・・ほんとにこれを解説するのか・・・いいえ、しません。
ポイントだけね。</p>

<ul>
<li>フォーマット

<ul>
<li>yaml で書きましょう</li>
<li>あとは推して図りましょう</li>
</ul>
</li>
<li>handlers と notify だけちょっとわからない気がする

<ul>
<li>handlers は task と同じなんだけど、特別な task と思うのがいい

<ul>
<li>何が特別って、notify からしか呼び出せない</li>
</ul>
</li>
<li>つまり、notify を、どっかの task(task A とする)の中に書いておいて、
handlers の name に書いてある task を呼び出すと、
その task A が終了したときに handlers の task を呼び出せる(daemon 再起動とかに便利)</li>
</ul>
</li>
<li>なんかよくわからないところで説明してないところがある気がする

<ul>
<li>僕もよくわからないからだと思います</li>
</ul>
</li>
</ul>


<p>モジュールの詳細については、ansible の公式ドキュメントをみたほうが圧倒的にいいので、
<a href="http://docs.ansible.com/modules_by_category.html">ここ</a>参照。</p>

<p>その他、この Playbook で使ってるモジュールの説明は以下につらつらと。
みててわかんないとこはコメントなり twitter なり自分で考えるなりしてちょ。</p>

<h3>config file のテンプレをコピーするだけの時はどうしているか</h3>

<h4>template モジュールを使ってます</h4>

<p>```
&ndash; name: Setup nginx.conf file
  template: src=/vagrant/conf/nginx/nginx.conf</p>

<pre><code>        dest=/etc/nginx/nginx.conf
</code></pre>

<p>```
こんな感じに。<br/>
src  : テンプレファイルを指定<br/>
dest : テンプレのコピー先を指定</p>

<p><strong>dest</strong>だよ。<br/>
僕はずっと、<strong>dst</strong>って書いてて、
動かない現象に勝手に悩まされていました。</p>

<h3>既存ファイルを削除するときはどうしているか</h3>

<h4>file モジュールを使ってます</h4>

<p>```
&ndash; name: remove default nginx site
  file:     path=/etc/nginx/sites-enabled/default</p>

<pre><code>        state=absent
</code></pre>

<p>```</p>

<p>path  : 削除したいファイルのパスを指定<br/>
state : absent って書いておけば消してくれる</p>

<h3>Symbolic link を作成するときはどうしているか</h3>

<h4>file モジュールを使ってます</h4>

<p>```
&ndash; name: Setup nginx virtualhost symbolic link for wordpress
  file:     src=/etc/nginx/sites-available/wordpress</p>

<pre><code>        dest=/etc/nginx/sites-enabled/wordpress
        state=link
</code></pre>

<p>```</p>

<p>↓ ↓ ↓ ↓ こういうシンボリックリンクになる。<br/>
dest &mdash;> src</p>

<h3>Directory を作成するときはどうしているか</h3>

<h4>file モジュールを使ってます</h4>

<p>```
&ndash; name: Create nginx root directory for wordpress
  file:     path=/var/www/paralympics</p>

<pre><code>        state=directory
</code></pre>

<p>```
path  : 作成したい Directory のパスを指定<br/>
state : directory って書いておけば作ってくれる</p>

<h3>MySQL のユーザを作るときはどうしているか</h3>

<h4>mysql_user モジュールを使ってます</h4>

<p>```
&ndash; name: Configure database server
  hosts: db
  sudo: yes
  tasks:
  &ndash; name: Setup mysql</p>

<pre><code>template: src=/vagrant/conf/mysql/my.cnf
          dest=/etc/mysql/my.cnf
</code></pre>

<ul>
<li>name: Add user &lsquo;wp-user&rsquo; to mysql
mysql_user: name=wp-user password=&ldquo;&rdquo;
```</li>
</ul>


<p>上記で作って、もう一カ所、下記でも作っている・・・
これはたぶん上のほうを消すの忘れただけなので、上はなくても動くと思う。たぶん。
みたまんま、wp-userを、パスなしで、色々grantして作ってます。</p>

<p>```
&ndash; name: Create Wordpress database user
  mysql_user: name=wp-user password=&ldquo;&rdquo;</p>

<pre><code>          priv=*.*:SELECT,INSERT,UPDATE,DELETE,CREATE,ALTER,DROP,INDEX
</code></pre>

<p>```</p>

<h3>MySQL のtable 操作をしたい場合はどうしているか</h3>

<h4>mysql_db モジュールを使ってます</h4>

<p><code>
- name: Create Wordpress database
  mysql_db: name=mywp_db state=present
</code></p>

<p>name  : 作りたい Database 名<br/>
state : present で作る</p>

<h3>git 操作したい場合はどうしているか</h3>

<h4>git モジュールを使ってます</h4>

<p>```
&ndash; name: Download wordpress plugin staticpress
  git: repo=<a href="https://github.com/megumiteam/staticpress">https://github.com/megumiteam/staticpress</a></p>

<pre><code>   dest=~/downloads/wp-content/plugins/staticpress
   accept_hostkey=yes
</code></pre>

<p>  sudo: no
&ndash; name: Setup wordpress
  git: repo=git://github.com/WordPress/WordPress.git</p>

<pre><code>   dest=~/downloads/
   version=4.0
   accept_hostkey=yes
</code></pre>

<p>  sudo: no
```</p>

<p>repo : clone したいレポジトリ<br/>
dest : どこに clone するか<br/>
accept_hostkey : yes で サーバ認証を無視してくれます(sshのStrictHostKeyChecking off と同じ)<br/>
sudo : no にすると、実行時は一般ユーザで<br/>
version : 指定してる場合はそのタグを checkout</p>

<h3>ファイルを download する場合はどうしているか</h3>

<h4>get_url を使ってます</h4>

<p><code>
- name: Download wordpress plugin The Event Calendar
  get_url: url=https://downloads.wordpress.org/plugin/the-events-calendar.3.8.zip dest=/tmp/
</code></p>

<p>get_url : ダウンロードしたい URL を指定する<br/>
dest    : download 先を指定する</p>

<h3>download したファイルを unzip したい場合はどうしているか</h3>

<h4>shell モジュールを使ってます</h4>

<p><code>
- name: Unzip the-events-calendar plugin
  shell: unzip -o /tmp/the-events-calendar.3.8.zip -d ~/downloads/wp-content/plugins/
  sudo: no
</code></p>

<p>一見、unarchive モジュールで出来るように見えるんだけど、ローカルファイルを、
リモートに送信してから展開するモジュールなので、ちょっと違う。
今回は、shell モジュールで直接 unzip コマンドを実行しましたよ。</p>

<h3>ファイルを remote サーバ内でコピーする場合はどうしているか</h3>

<h4>synchronize モジュールを使ってます</h4>

<p>```
&ndash; name: Install wordpress files to nginx root directory for wordpress
  synchronize: src=~/downloads/</p>

<pre><code>           dest=/var/www/paralympics/
           recursive=yes
</code></pre>

<p>```</p>

<p>src       : 送信するファイル or ディレクトリ<br/>
dest      : 送信先のパス<br/>
recursive : yes にすると、再起的にディレクトリを送ってくれる</p>

<h3>file/directory の owner を変更する場合はどうしているか</h3>

<h4>file モジュールを使ってます</h4>

<p><code>
- name: Change ownership of Wordpress installation
  file: path=/var/www/paralympics/ owner=www-data group=www-data state=directory recurse=yes
</code></p>

<p>path : 対象パス
owner : owner 誰にするか
group : どの group にするか
state : directory にすると、directory の設定をする？のかな？
recurse : yes を設定すると、再起的にowner/group を設定してくれる</p>

<p>ざっくり全体感はこんな感じ。
何も説明してない感満載だけど、playbook 書いて実行するだけなら、
そんなに勉強することもない、ってことな気がする。role とか vars を使うときに
少し説明したり、勉強したり、がでてくるんじゃないかな。</p>

<p>そんなわけで、その辺は次回のお楽しみ！</p>

<h2>その他</h2>

<h3>今回一番大変だったこと</h3>

<p>まぁいつもそうだけど、動くところまで大変でした。</p>

<h4>ansible で ImportError って出てる場合は、実は、ansible のログ出力先に permission がない場合もある</h4>

<p>出力先を /var/log/ansible.log に設定してた。
んで、permission がなくて起動してなかったんだけど、めんどくさくて 777にしちゃった　</p>

<h4>ansible で ImportError って出てる場合は、必要なpackageがインストールされていない場合もある</h4>

<p>動作確認するのに、何度もvagrant destroy/vagrant upを繰り返したくて、
一旦 apt-get update を削除したわけです。
そしたら、なんか急に yaml 関連のエラーが出てきて大変でした。
出てくるエラーが、ログ出力先のpermission問題の時と似てるので、
「あれ？なんかpermissionのところいじったっけ？？？」ってなって、泥沼。</p>

<p>しばらくしてから、ふと、そういえば一旦 update 止めよう、
ってくらいから変な気がする・・・と思って戻したら直ったわけで。
update しないとインストールできないpackageもあるってことですな・・・</p>

<p>こんな感じに結構簡単に使える ansible です。
ただ、playbook は、こんな雑に書いてるると、実運用ではカオスすぎて
使い物にならないと思うので、次回は、include/role/vars辺りについて
書いて、もっとスマート運用を目指します。</p>

<p>でもあれなんだよな、僕なんも運用するもの持ってないんだよな・・・</p>

<p><img src="http://blog.branch4.pw/images/2014/10/ansible_circleA_red.png" alt="ansible badge" /></p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible入門 - Ad-hoc Modeを使ってみる -]]></title>
    <link href="http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners/"/>
    <updated>2014-09-09T01:00:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners</id>
    <content type="html"><![CDATA[<p>予定より少し遅れて Ansible エントリでございます。<a href="https://twitter.com/xengineer01">@xengineer01</a>です。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/ANSI_logotype_web.png" alt="ansible logo" /><br/>
<img src="http://blog.branch4.pw/images/2014/09/ansible_badge.png" alt="ansible badge" /></p>

<h2>Ansible とは？</h2>

<hr />

<p>Ansible は、configuration management tool というやつですわ。<br/>
continuous delivery/continuous deployment とかに用いられますよ。chef/puppet/capistrano的な。</p>

<p>さて、私昔、chefを使おうとして挫折した組です。理由は沢山あるんですが、
まぁぶっちゃけ難しくてわからなかったですw</p>

<p>Ansibleの何がいいって、<a href="http://techracho.bpsinc.jp/yamasita-taisuke/2014_05_29/17567">techracho</a>さんもいってらっさいますが、シンプルそうなんですよ。</p>

<p>なので触ってみます、勝つまでは。</p>

<h2>ざっくりagenda</h2>

<ol>
<li>システム構成

<ul>
<li>今回の検証環境のシステム構成紹介</li>
</ul>
</li>
<li>Ansible について

<ul>
<li>簡単に紹介</li>
</ul>
</li>
<li>Ansible の使い方

<ul>
<li>簡単に紹介</li>
</ul>
</li>
<li>Ansible 全体像

<ul>
<li>remote server の認証方法</li>
</ul>
</li>
<li>Ad-hoc mode で使ってみる

<ul>
<li>実際使ってみる</li>
</ul>
</li>
</ol>


<p>こんな感じ？</p>

<!-- more -->


<p></p>

<h2>写真紹介</h2>

<p>まずは、唐突ながら、友人の写真紹介です(笑)
いつもいい写真撮るんですよね。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/nabechan02_kamiiso.jpg" alt="nabechan kamiiso" /><br/>
※ Hiroyuki Watanabeの写真で、<a href="http://my-eyes.net/">http://my-eyes.net/</a>に元があります。</p>

<p>では本題に・・・</p>

<h2>システム構成</h2>

<hr />

<p>今回は、vagrant 使って、下記構成を作って使ってみました。
念のため最初に断っておくと、今回はまだ、ansible のad-hoc mode を試してみよう、
程度なので、vagrant + ansible の連携とか、vagrantの設定まで踏み込んでいくつもりはなく、
いつでも検証自体を再現できるように使ってるだけです。</p>

<p>```</p>

<pre><code>                        +------------+
                        |            |
                    +---+ apserver01 |
+-----------+       |   |            |
|           |       |   +------------+
| ansible01 +-------+
|           |       |   +-----------+
+-----------+       |   |           |
                    +---+ fluentd01 |
                        |           |
                        +-----------+
</code></pre>

<p>```</p>

<p>上のシステムで、ansible01 から２台のサーバに、deploy したり、
configuration managementしたり、ってのをやってみようかな、と。</p>

<h3>環境について</h3>

<ul>
<li>OS

<ul>
<li>Ubuntu 12.04 LTS \n \l</li>
</ul>
</li>
<li>ansible

<ul>
<li>ansible 1.8 (devel b6a30a7331) last updated 2014/08/27 14:24:50 (GMT +000)</li>
</ul>
</li>
<li>Python

<ul>
<li>Python 2.7.3</li>
</ul>
</li>
<li>OpenSSH/OpenSSL

<ul>
<li>OpenSSH_5.9p1 Debian-5ubuntu1, OpenSSL 1.0.1 14 Mar 2012</li>
</ul>
</li>
</ul>


<h2>Vagrantfile config</h2>

<hr />

<p>まず、ベースのところは、<a href="http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2/">前回のエントリ</a>で書いた Vagrantfile からほぼ丸パクリ。</p>

<p>```
$ cat /vagrant/Vagrantfile</p>

<h1>&ndash;<em>&ndash; mode: ruby &ndash;</em>&ndash;</h1>

<h1>vi: set ft=ruby :</h1>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.provision :shell, path: &ldquo;bootstrap/all.sh&rdquo;</p>

<p>  not_dbs = { :ansible01 => &lsquo;192.168.101.101&rsquo;,</p>

<pre><code>          :apserver01 =&gt; '192.168.102.101',
          :fluentd01  =&gt; '192.168.102.111'
        }
</code></pre>

<p>  not_dbs.each do |not_db_name, not_db_ip|</p>

<pre><code>config.vm.define not_db_name do |server_config|
  bootstrap_path = "bootstrap/#{not_db_name}.sh"
  bootstrap_path_user = "bootstrap/#{not_db_name}_user.sh"
  server_config.vm.box = "hashicorp/precise64"
  server_config.vm.hostname = not_db_name.to_s
  server_config.vm.network "private_network", ip: not_db_ip
  server_config.vm.provision :shell, path: bootstrap_path
  server_config.vm.provision :shell, path: bootstrap_path_user, privileged: false

  server_config.vm.provider :virtualbox do |v|
    v.customize ["modifyvm", :id, "--memory", "384"]
    v.customize ["modifyvm", :id, "--cpus", "1"]
  end
end
</code></pre>

<p>  end
end
```</p>

<p>読めばわかる。大きく変えてるのは、provisioningのshell実行するとこで、rootで実行するパターンと、
通常ユーザで実行するパターンを分けてることかな。
もしわからなかったら<a href="http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2/">こちら</a>へ。</p>

<p>bootstrap/ansible01.sh は下記。
```
$ cat /vagrant/bootstrap/ansible01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y git
apt-get install -y python-setuptools
apt-get install -y python-dev
apt-get install -y libyaml-dev</p>

<p>git clone git://github.com/ansible/ansible.git
cd ./ansible
source ./hacking/env-setup</p>

<p>echo &ldquo;source ~/ansible/hacking/env-setup&rdquo; >> ~/.bashrc</p>

<p>easy_install pip
pip install paramiko PyYAML jinja2 httplib2</p>

<p>mkdir -p /etc/ansible
cat &lt;<EOF > /etc/ansible/hosts
[ansible]
192.168.101.101</p>

<p>[web]
192.168.102.101</p>

<p>[fluentd]
192.168.102.111
EOF
```</p>

<p>やってることは、ansibleのインストールとInventoryの設定。<br/>
ansibleインストールのための必須条件は、下記。</p>

<ul>
<li>&gt;= Python 2.6(3系はNG)</li>
</ul>


<p>管理される側のサーバは、</p>

<ul>
<li>&gt;= Python 2.4(3系はNG)

<ul>
<li>Python 2.5 &lt; の場合は、python-simplejson も必須</li>
</ul>
</li>
</ul>


<p>Inventoryについては後述。</p>

<p>bootstrap/ansible01_user.shの内容はこれ。
```
$ cat /vagrant/bootstrap/ansible01_user.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>ssh-keygen -t rsa -f ~/.ssh/id_rsa -N &lsquo;&rsquo;</p>

<p>cp ~/.ssh/id_rsa.pub /vagrant/ansible01_publickey
echo &ldquo;source ~/ansible/hacking/env-setup&rdquo; >> ~/.bashrc
```</p>

<p>公開鍵と秘密鍵生成して、公開鍵を、共有ディレクトリに突っ込んで、
あとは、ansibleの環境変数をsourceするように.bashrcに書いてる、と。</p>

<p>公開鍵の格納場所は、このあとの管理ノードがそこから読んで、authorized_keyに設定できるようにしてるわけです。
なんかもっとスマートな方法ないかなー、と思ったんだけど、とりあえずテスト用環境だからいっか。</p>

<p>次は、bootstrap/apserver01.sh。
```
$ cat /vagrant/bootstrap/apserver01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>/vagrant/bootstrap/apserver.sh
/vagrant/bootstrap/not_db.sh
```</p>

<p>なんもしとらん！w<br/>
apserver.shとnot_db.sh呼んでるだけなので、まずは、not_db.shから。</p>

<p>```
$ cat /vagrant/bootstrap/not_db.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y curl
curl -L <a href="http://toolbelt.treasuredata.com/sh/install-ubuntu-precise.sh">http://toolbelt.treasuredata.com/sh/install-ubuntu-precise.sh</a> | sh</p>

<p>mkdir /var/log/td-agent/tmp/
```</p>

<p>ファイル名から察するに、DBサーバじゃなかったら、curlインストールするのと、fluentdインストールしてんだね。
んで、apserver.sh。</p>

<p>```
$ cat /vagrant/bootstrap/apserver.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y apache2
rm -rf /var/www
ln -fs /vagrant /var/www</p>

<p>chmod o+x /var/log/apache2/
chmod o+r /var/log/apache2/access.log</p>

<p>cat &lt;&lt; EOF > /etc/td-agent/td-agent.conf</p>

<h1>tail input</h1>

<p><source>
  type tail
  path /var/log/apache2/access.log
  pos_file /var/log/td-agent/tmp/httpd-access.log.pos
  tag apache.access
  format apache2
</source></p>

<h1>Log Forwarding</h1>

<p><match apache.**>
  type forward</p>

<p>  # primary host
  <server></p>

<pre><code>host 192.168.102.1
port 24224
</code></pre>

<p>  </server>
  # use secondary host
  <server></p>

<pre><code>host 192.168.102.2
port 24224
standby
</code></pre>

<p>  </server></p>

<p>  # use longer flush_interval to reduce CPU usage.
  # note that this is a trade-off against latency.
  flush_interval 60s
</match>
```</p>

<p>apserverには、apacheインストールして、fluentdの細かい設定しております。
今回の、ansibleのエントリには毛ほども関係ない設定です。消してもいいです。</p>

<p>次は、bootstrap/apserver01_user.sh。</p>

<p>```
$ cat /vagrant/bootstrap/apserver01_user.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>mkdir -p ~/.ssh/
touch ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
cat /vagrant/ansible01_publickey >> ~/.ssh/authorized_keys
```
ここで、公開鍵関連の設定をしております。<br/>
なんか突然、/vagrant/ansible01_publickeyをauthorized_keysに入れてます。
Vagrantでは、/vagrantファイルに、Vagrantfileが存在してるディレクトリがマウントされるからっすね。
これで、上のほうで、ansible01.shがやってたことが理解できる、と。</p>

<p>では最後に、bootstrap/fluentd01.shと、bootstrap/fluentd01_user.shの中身を貼付けてだけおきます。
解説なし。</p>

<p>```
$ cat /vagrant/bootstrap/fluentd01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>/vagrant/bootstrap/not_db.sh</p>

<p>cat &lt;&lt; EOF > /etc/td-agent/td-agent.conf</p>

<h1>Input</h1>

<p><source>
  type forward
  port 24224
</source></p>

<h1>Output</h1>

<p><match apache.**>
  type file
  path /var/log/td-agent/out_apachelog
  time_slice_format %Y%m%d
  time_slice_wait 10m
  time_format %Y%m%dT%H%M%S%z
  compress gzip
  utc
</match>
EOF</p>

<p>$ cat /vagrant/bootstrap/fluentd01_user.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>mkdir -p ~/.ssh/
touch ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
cat /vagrant/ansible01_publickey >> ~/.ssh/authorized_keys
```</p>

<p>あ、あと、bootstrap/all.shがあった。
これも解説なし。</p>

<p>```
$ cat /vagrant/bootstrap/all.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get update
apt-get install -y vim
apt-get install -y vim-common
```</p>

<p>この辺全部ぶっ込んで、vagrant upしたらうまくいくと思う。たぶん。</p>

<h2>Ansible について</h2>

<hr />

<p><a href="http://www.ansible.com/home">Ansible</a> に関しては、<a href="http://docs.ansible.com/">公式ドキュメント</a>を読み進める形でエントリも書いていきます。
でも、それだと公式ドキュメントの日本語訳にしかならないので、
今回の構成にあった感じとか、わかりやすくしたり、僕だったら実践こんな感じで使うのかなー、
ってのをまじえつついく予定。</p>

<h2>Ansible の使い方</h2>

<hr />

<p>まず、Ansible の簡単な特徴を、下記イメージ図にて。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/ansible_rserver_communication_image.png" alt="ansible" /></p>

<p>図に書いてある感じなのかなー、と感じております。
僕は、chef/puppet なんかに比べて比較的簡単に理解できそうなのでやってみようと思い立ちました。</p>

<p>認証については、今回は、public key 配布して、password なしで通す方向でやります。
きっとこの方法が一番需要が多いと思われますゆえ・・・</p>

<p>Ansible は、ドキュメントを読むと、大きく２通りの使い方があるみたい。
違いも込みであげると、</p>

<ul>
<li>Ad-hoc mode

<ul>
<li>リモートサーバ上でコマンドを実行するモード。
コマンド自体は記録されないので、
何度も反復はしない場合の使い方</li>
</ul>
</li>
<li>Playbook

<ul>
<li>Configuration Management Systemとしての使い方。
定義したグループのサーバに対して、継続的に設定を反映したり、
デプロイしたりする用途</li>
</ul>
</li>
</ul>


<p>今回のエントリは、Ad-hoc mode を使いながら紹介していきます。</p>

<h2>Ansible 全体像</h2>

<p>それで、Ad-hoc mode で使う分にはこの辺を知ってればいいかな・・・という
イメージ図が下記。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/ansible_ad_hoc_image.png" alt="ad-hoc mode" /></p>

<p>これにさっきのイメージ図の認証があれば、大体全体像は理解できる。と思う。
認証の設定は、<a href="http://blog.branch4.pw/blog/2014/09/06/public-key-authentication/">先日書いたブログ</a>を参照くだされ。
それぞれを簡単に説明すると・・・</p>

<ul>
<li>Inventory

<ul>
<li>管理対象サーバをここで設定する</li>
<li>ノードの設定だけじゃなくて、グルーピング機能があったり、色々便利</li>
</ul>
</li>
<li>Ansible configuration

<ul>
<li>ansible全体の挙動の設定

<ul>
<li>例えば、inventoryの設定ファイルの場所</li>
<li>例えば、毎回パスワード確認のプロンプトを出すか</li>
</ul>
</li>
</ul>
</li>
<li>Modules

<ul>
<li>実際に実行する設定/deploy などが実装されてる単位</li>
<li>例えば、commandを実行する場合は、Commands Modules</li>
<li>例えば、file転送する場合は、Files Modules的な感じで、Module単位で実装されている</li>
</ul>
</li>
</ul>


<p>コマンド打つと、この辺の設定を読み込んで実行してくれる、という流れ。</p>

<h2>Ad-hoc mode で使ってみる</h2>

<p>まず、なんか動いてるのをみてテンションあげないとやってられないので、コマンド実行してみよう。</p>

<p>ansible01にログインして今回登録した全サーバにpingを打ってみる。
vagrant関連のconfigで事前の設定は全部してあるから大丈夫。通ります。たぶん。</p>

<p>```
$ vagrant ssh ansible01
$ ansible all -m ping
192.168.101.101 | FAILED => SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue
192.168.102.101 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}</p>

<p>192.168.102.111 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}
```</p>

<p>あ、通ってない・・・w<br/>
ansibleサーバ自身には、公開鍵登録してないからだわ。なので、登録。
(あんまり自分自身にコマンド打つ用途はないので、普段はやらないと思うけど)</p>

<p><code>
$ cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys
$ cat .ssh/authorized_keys #&lt;- 確認してね
</code></p>

<p>再度実行！</p>

<p>```
$ ansible all -m ping
192.168.101.101 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}</p>

<p>192.168.102.111 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}</p>

<p>192.168.102.101 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}
```</p>

<p>おー。うまくいった。よしよし。では諸設定の説明をば。</p>

<h3>Inventory</h3>

<p><a name="inventory"></a>
全体像のイメージ図に出て来た３つの要素の一つ、Inventoryについて。</p>

<ul>
<li>Inventory

<ul>
<li>管理対象サーバをここで設定する</li>
<li>ノードの設定だけじゃなくて、グルーピング機能があったり、色々便利</li>
</ul>
</li>
</ul>


<p>って上で書いてた。</p>

<p>まず、Inventoryファイルは、デフォルトの、/etc/ansible/hosts に以下のように作成します。
(ファイルの場所変更するには、Ansible Configuration に設定する。後述しますわ)</p>

<p>```
$ cat /etc/ansible/hosts
[ansible]
192.168.101.101</p>

<p>[web]
192.168.102.101</p>

<p>[fluentd]
192.168.102.111
```</p>

<p>四角い括弧のなかが、グループ名で、その下に書いてあるIPアドレスがそのグループに所属するホストになります。<br/>
ホスト名解決はできないぽ。</p>

<p>apserver01 192.168.102.101</p>

<p>みたいに書いたら、名前解決できんのかと思ったら、できまてん。なので、名前解決は、
いまのところの僕の知識だと、外だしソリューションしないといけないのかな。めんどくせ。
ただ、Dynamic Inventoryの項目がドキュメントにあったので、その辺深堀すればそれっぽいのがありそうな予感。</p>

<p>Inventoryには、グルーピング以外にも、変数渡す機能とかもあるけど、
このエントリではここまでに留めて、別途Inventory単体でエントリ書く予定。
壮大になりすぎます。</p>

<p>ad-hoc mode で static Inventoryファイルを使ってコマンド送るときのベースはこんな感じで、
管理対象サーバ/グループの増減に従って、Inventoryファイルを編集しましょうね、な感じです。</p>

<h3>Ansible Configuration</h3>

<p>２つ目の、Ansible Configurationについて。</p>

<p>ansible全体の挙動を決定する設定ファイルのこと。
version1.6以降では、下記の優先順位で評価されます。</p>

<ul>
<li>ANSIBLE_CONFIG (環境変数)</li>
<li>ansible.cfg (under current directory)</li>
<li>~/.ansible.cfg (under home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ul>


<p>version1.5以前では、下記の優先順位。環境変数とcurrent directoryが入れ替わったのね。</p>

<ul>
<li>ansible.cfg (under current directory)</li>
<li>ANSIBLE_CONFIG (環境変数)</li>
<li>~/.ansible.cfg (under home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ul>


<p>ただこれも次のバージョンでは変わってるかもしれないので、<a href="http://docs.ansible.com/intro_configuration.html#the-ansible-configuration-file">ここ</a>を正とするのがよーし。</p>

<h4>何を設定できるの？</h4>

<p>全体の挙動って何よ？ってなるので、例を下記に。</p>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">デフォルト値</th>
<th align="left">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">hostfile       </td>
<td align="left"> /etc/ansible/hosts </td>
<td align="left"> Inventoryファイルの場所</td>
</tr>
<tr>
<td align="left">library        </td>
<td align="left"> /usr/share/ansible </td>
<td align="left"> Moduleの格納場所</td>
</tr>
<tr>
<td align="left">remote_tmp     </td>
<td align="left"> $HOME/.ansible/tmp </td>
<td align="left"> ansibleは、module丸ごとremoteに転送して実行されるので、remoteでの格納先</td>
</tr>
<tr>
<td align="left">forks          </td>
<td align="left"> 5                  </td>
<td align="left"> remoteに同時接続する上限。デフォルトはかなり保守的</td>
</tr>
<tr>
<td align="left">poll_interval  </td>
<td align="left"> 15                 </td>
<td align="left"> 非同期処理への終了確認ポーリング間隔の設定</td>
</tr>
<tr>
<td align="left">sudo_user      </td>
<td align="left"> root               </td>
<td align="left"> playbookに sudo_userの指定がない場合のデフォルト設定</td>
</tr>
<tr>
<td align="left">ask_sudo_pass  </td>
<td align="left"> False              </td>
<td align="left"> sudo時に、password確認のプロンプトをするか</td>
</tr>
<tr>
<td align="left">ask_pass       </td>
<td align="left"> False              </td>
<td align="left"> password確認のプロンプトをするか</td>
</tr>
<tr>
<td align="left">transport      </td>
<td align="left"> smart              </td>
<td align="left"> 転送に何を使うか。smart:ssh/local:localhost?/chroot:?/jail:?。基本ssh</td>
</tr>
<tr>
<td align="left">remote_port    </td>
<td align="left"> 22                 </td>
<td align="left"> remote hostで使うポート番号。Inventoryファイルでホスト毎に上書きできる</td>
</tr>
<tr>
<td align="left">module_lang    </td>
<td align="left"> C                  </td>
<td align="left"> 各モジュール間のやりとりで使う言語</td>
</tr>
</tbody>
</table>


<p>こんな感じで、ほんとうに全体の挙動に関する設定ですわ。大体の設定は、
システムのデフォルト値をここで決めて、個別に、Playbook/Inventoryファイルなんかで決めるイメージ。
他にも項目が沢山あるので、それは別途エントリを作りますかね。</p>

<p>そして設定項目全部みたいときは、<a href="https://github.com/ansible/ansible/blob/devel/examples/ansible.cfg">こちら！</a>で、
大元をみたほうがはやいっす。もちろんgithubは最新なので、ansibleのバージョンによっては
使えないのも入ってると思うので、その辺は調べてみてくだされ。</p>

<h3>Modules</h3>

<p>最後の、Modules について。</p>

<p>ここが、ansibleの実質上のコアなのかな。
ad-hoc modeでは、実行するmoduleを、コマンドラインから指定して、
playbookでは、playbookの中で設定して、各moduleをremoteサーバに転送した後、
各サーバで実行する方式です。</p>

<p>色んなmoduleがあるので、実行したい内容に合わせて選択する形になります。
自作もできるようなので、ない場合は自分で作りましょう。</p>

<p>本エントリは、ad-hoc modeのエントリなので、ad-hoc modeでどうやってmoduleを指定するかを下記に。</p>

<p><code>
$ ansible &lt;targets&gt; -m &lt;module&gt; -a "&lt;arguments to the module&gt;"
</code></p>

<p>まんまだわ。</p>

<h4>targets</h4>

<p><a href="#inventory">Inventory</a>で書いてる何かを指定します。</p>

<ul>
<li>サーバ単体を指定する場合

<ul>
<li>192.168.102.101</li>
</ul>
</li>
<li>グループを指定する場合

<ul>
<li>web</li>
</ul>
</li>
<li>全部を指定する場合

<ul>
<li>all</li>
</ul>
</li>
</ul>


<h4>module</h4>

<p>moduleはね、もう一杯あって、どれを使うのかわかんなくなるね。</p>

<p>例として、/tmp/test っていうファイルを、apserver01に作成して、permissionを777に変更するコマンドを実行してみよう。</p>

<h5>まずは、apserver01 にファイルが存在しないことを確認。</h5>

<p>ansible01で下記を実行する。</p>

<p><code>
$ ansible 192.168.102.101 -m command -a "ls /tmp"
192.168.102.101 | success | rc=0 &gt;&gt;
vagrant-shell
</code></p>

<p>うむ。vagrant-shellってファイルしかないので次に進もう。</p>

<h5>使うmodule 選択とざっくり流れ</h5>

<p>今回は、ファイル作るので・・・command module で普通にtouch実行して、
そのあとに、file module でpermission変更します。</p>

<p>各moduleについては、下記参照。</p>

<ul>
<li><a href="http://docs.ansible.com/command_module.html">Command module</a>

<ul>
<li>引数に、実行するコマンドを渡すと実行してくれる</li>
<li>pipe とか、＆はだめ、対応してない</li>
<li>pipe とか使う場合は、<a href="http://docs.ansible.com/shell_module.html">shell module</a>を使う</li>
</ul>
</li>
<li><a href="http://docs.ansible.com/file_module.html">File module</a>

<ul>
<li>File/Directory/Symbolic link等を作成する</li>
<li>File/Directory等のowner設定変更</li>
<li>File/Directory等のgroup設定変更</li>
<li>File/Directory等のpermission設定変更</li>
</ul>
</li>
</ul>


<p>あ、見事にFile moduleでファイルも作成できる・・・でも今回はcommand で！w</p>

<h5>apserver01上に、ファイル作成</h5>

<p>下記をansible01上で実行してみる。</p>

<p>```
$ ansible 192.168.102.101 -m command -a &ldquo;touch /tmp/test&rdquo;
192.168.102.101 | success | rc=0 >></p>

<p>$ ansible 192.168.102.101 -m command -a &ldquo;ls -l /tmp&rdquo;
192.168.102.101 | success | rc=0 >>
total 4
-rw-rw-r&mdash; 1 vagrant vagrant   0 Sep  7 06:07 test
-rwx&mdash;x&mdash;x 1 vagrant vagrant 159 Aug 30 14:21 vagrant-shell
```</p>

<p>お、できている。スーパー！！！
で、permissionは、664。</p>

<p>次は、permisssion変更します。</p>

<h5>ファイルのpermission変更</h5>

<p>644だったpermissionを777に変更してやります。
permission変更は、file moduleを利用するわけですが、
<a href="http://docs.ansible.com/file_module.html">公式ドキュメント</a>曰く(ちょっと省略してるけど)、</p>

<table>
<thead>
<tr>
<th align="left">parameter </th>
<th align="left"> required  </th>
<th align="left"> default </th>
<th align="left"> choices </th>
<th align="left"> comments</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">force     </td>
<td align="left">  no       </td>
<td align="left"> no      </td>
<td align="left"> yes     </td>
<td align="left"> ２つのケースについて、symlinkの作成を強制する。ひとつは、source fileが存在しない場合(linkを張っておいて、あとからファイル自体は作成する)。もうひとつは、destination が存在していて、かつファイルである場合。(この場合、pathに指定しているファイルを削除して、symlinkを作成する)</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> no      </td>
<td></td>
</tr>
<tr>
<td align="left">group     </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td></td>
</tr>
<tr>
<td align="left">mode      </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> ファイル/ディレクトリのpermission設定。</td>
</tr>
<tr>
<td align="left">owner     </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> ファイル/ディレクトリのowner設定。</td>
</tr>
<tr>
<td align="left">path      </td>
<td align="left">  yes      </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> 管理対象ファイルのpath。file module内で唯一必須項目。 Aliases: dest, name</td>
</tr>
<tr>
<td align="left">recurse   </td>
<td align="left">  no       </td>
<td align="left"> no      </td>
<td align="left"> yes     </td>
<td align="left"> ファイルの設定を再起的に実施するかどうか。(state=directoryにのみ適用する) (Ansible 1.1以降実装)</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> no      </td>
<td></td>
</tr>
<tr>
<td align="left">src       </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> state=linkにのみ適用する。linkするファイルのpathを指定。絶対path/相対path/存在しないpathを指定可能です。相対pathは展開されません。</td>
</tr>
<tr>
<td align="left">state     </td>
<td align="left">  no       </td>
<td align="left"> file    </td>
<td align="left"> file    </td>
<td align="left"> fileを指定して、srcが存在しない場合、ファイルは作成されません。作成したい場合は、copy/template moduleを使いましょう。はて？fileって必要なの？？</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> link    </td>
<td align="left"> linkを指定した場合、symbolick linkが作成されるか、変更される。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> directory </td>
<td align="left"> directoryを指定した場合, 存在しない場合、直接の全サブディレクトリが作成されます。version1.7以降では、modeで指定したpermissionに従って作成される。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> hard    </td>
<td align="left"> hardlinkを作成する場合は、hardを指定する。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> touch   </td>
<td align="left"> touch(version1.4以降)を指定した場合、Linux コマンドのtouchと同じ挙動をする。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> absent  </td>
<td align="left"> absentを指定した場合、ディレクトリは再起的に削除されて、ファイルとsymlinkは削除される。</td>
</tr>
</tbody>
</table>


<p>この表からわかる通り、file moduleで必須なオプションは、"path" のみ。
pathで指定されたファイル/ディレクトリ等に対して、何をするかを、他のオプションで指定する寸法。
今回は、permissionを777に変更したいので、"mode=0777" を指定して、実行してみる。</p>

<p>```
$ ansible 192.168.102.101 -m file -a &ldquo;path=/tmp/test mode=0777&rdquo;
192.168.102.101 | success >> {</p>

<pre><code>"changed": true,
"gid": 1000,
"group": "vagrant",
"mode": "0777",
"owner": "vagrant",
"path": "/tmp/test",
"size": 0,
"state": "file",
"uid": 1000
</code></pre>

<p>}</p>

<p>$ ansible 192.168.102.101 -m command -a &ldquo;ls -l /tmp&rdquo;
192.168.102.101 | success | rc=0 >>
total 4
-rwxrwxrwx 1 vagrant vagrant   0 Sep  7 06:07 test
-rwx&mdash;x&mdash;x 1 vagrant vagrant 159 Aug 30 14:21 vagrant-shell
```</p>

<p>おーーーー、変わった変わった。ちゃんちゃん。
無事に、testファイルのpermissionが777になっておりました。
よかったよかった。</p>

<p>というわけで、ansibleは、大量のサーバに任意のコマンドをばこばこ発行したり、色々できる
便利なツールでした。おしまい。</p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>

]]></content>
  </entry>
  
</feed>
