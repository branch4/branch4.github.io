<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Provisioning | branch4 Blog]]></title>
  <link href="http://blog.branch4.pw/blog/categories/provisioning/atom.xml" rel="self"/>
  <link href="http://blog.branch4.pw/"/>
  <updated>2014-09-19T23:46:16+09:00</updated>
  <id>http://blog.branch4.pw/</id>
  <author>
    <name><![CDATA[root4]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansible入門 - Ad-hoc Modeを使ってみる -]]></title>
    <link href="http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners/"/>
    <updated>2014-09-09T01:00:00+09:00</updated>
    <id>http://blog.branch4.pw/blog/2014/09/09/ansible-for-beginners</id>
    <content type="html"><![CDATA[<p>予定より少し遅れて Ansible エントリでございます。<a href="https://twitter.com/xengineer01">@xengineer01</a>です。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/ANSI_logotype_web.png" alt="ansible logo" /><br/>
<img src="http://blog.branch4.pw/images/2014/09/ansible_badge.png" alt="ansible badge" /></p>

<h2>Ansible とは？</h2>

<hr />

<p>Ansible は、configuration management tool というやつですわ。<br/>
continuous delivery/continuous deployment とかに用いられますよ。chef/puppet/capistrano的な。</p>

<p>さて、私昔、chefを使おうとして挫折した組です。理由は沢山あるんですが、
まぁぶっちゃけ難しくてわからなかったですw</p>

<p>Ansibleの何がいいって、<a href="http://techracho.bpsinc.jp/yamasita-taisuke/2014_05_29/17567">techracho</a>さんもいってらっさいますが、シンプルそうなんですよ。</p>

<p>なので触ってみます、勝つまでは。</p>

<h2>ざっくりagenda</h2>

<ol>
<li>システム構成

<ul>
<li>今回の検証環境のシステム構成紹介</li>
</ul>
</li>
<li>Ansible について

<ul>
<li>簡単に紹介</li>
</ul>
</li>
<li>Ansible の使い方

<ul>
<li>簡単に紹介</li>
</ul>
</li>
<li>Ansible 全体像

<ul>
<li>remote server の認証方法</li>
</ul>
</li>
<li>Ad-hoc mode で使ってみる

<ul>
<li>実際使ってみる</li>
</ul>
</li>
</ol>


<p>こんな感じ？</p>

<!-- more -->


<p></p>

<h2>写真紹介</h2>

<p>まずは、唐突ながら、友人の写真紹介です(笑)
いつもいい写真撮るんですよね。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/nabechan02_kamiiso.jpg" alt="nabechan kamiiso" /><br/>
※ Hiroyuki Watanabeの写真で、<a href="http://my-eyes.net/">http://my-eyes.net/</a>に元があります。</p>

<p>では本題に・・・</p>

<h2>システム構成</h2>

<hr />

<p>今回は、vagrant 使って、下記構成を作って使ってみました。
念のため最初に断っておくと、今回はまだ、ansible のad-hoc mode を試してみよう、
程度なので、vagrant + ansible の連携とか、vagrantの設定まで踏み込んでいくつもりはなく、
いつでも検証自体を再現できるように使ってるだけです。</p>

<p>```</p>

<pre><code>                        +------------+
                        |            |
                    +---+ apserver01 |
+-----------+       |   |            |
|           |       |   +------------+
| ansible01 +-------+
|           |       |   +-----------+
+-----------+       |   |           |
                    +---+ fluentd01 |
                        |           |
                        +-----------+
</code></pre>

<p>```</p>

<p>上のシステムで、ansible01 から２台のサーバに、deploy したり、
configuration managementしたり、ってのをやってみようかな、と。</p>

<h3>環境について</h3>

<ul>
<li>OS

<ul>
<li>Ubuntu 12.04 LTS \n \l</li>
</ul>
</li>
<li>ansible

<ul>
<li>ansible 1.8 (devel b6a30a7331) last updated 2014/08/27 14:24:50 (GMT +000)</li>
</ul>
</li>
<li>Python

<ul>
<li>Python 2.7.3</li>
</ul>
</li>
<li>OpenSSH/OpenSSL

<ul>
<li>OpenSSH_5.9p1 Debian-5ubuntu1, OpenSSL 1.0.1 14 Mar 2012</li>
</ul>
</li>
</ul>


<h2>Vagrantfile config</h2>

<hr />

<p>まず、ベースのところは、<a href="http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2/">前回のエントリ</a>で書いた Vagrantfile からほぼ丸パクリ。</p>

<p>```
$ cat /vagrant/Vagrantfile</p>

<h1>&ndash;<em>&ndash; mode: ruby &ndash;</em>&ndash;</h1>

<h1>vi: set ft=ruby :</h1>

<p>VAGRANTFILE_API_VERSION = &ldquo;2&rdquo;</p>

<p>Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.provision :shell, path: &ldquo;bootstrap/all.sh&rdquo;</p>

<p>  not_dbs = { :ansible01 => &lsquo;192.168.101.101&rsquo;,</p>

<pre><code>          :apserver01 =&gt; '192.168.102.101',
          :fluentd01  =&gt; '192.168.102.111'
        }
</code></pre>

<p>  not_dbs.each do |not_db_name, not_db_ip|</p>

<pre><code>config.vm.define not_db_name do |server_config|
  bootstrap_path = "bootstrap/#{not_db_name}.sh"
  bootstrap_path_user = "bootstrap/#{not_db_name}_user.sh"
  server_config.vm.box = "hashicorp/precise64"
  server_config.vm.hostname = not_db_name.to_s
  server_config.vm.network "private_network", ip: not_db_ip
  server_config.vm.provision :shell, path: bootstrap_path
  server_config.vm.provision :shell, path: bootstrap_path_user, privileged: false

  server_config.vm.provider :virtualbox do |v|
    v.customize ["modifyvm", :id, "--memory", "384"]
    v.customize ["modifyvm", :id, "--cpus", "1"]
  end
end
</code></pre>

<p>  end
end
```</p>

<p>読めばわかる。大きく変えてるのは、provisioningのshell実行するとこで、rootで実行するパターンと、
通常ユーザで実行するパターンを分けてることかな。
もしわからなかったら<a href="http://blog.branch4.pw/blog/2014/08/11/setup-test-environment-with-vagrant2/">こちら</a>へ。</p>

<p>bootstrap/ansible01.sh は下記。
```
$ cat /vagrant/bootstrap/ansible01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y git
apt-get install -y python-setuptools
apt-get install -y python-dev
apt-get install -y libyaml-dev</p>

<p>git clone git://github.com/ansible/ansible.git
cd ./ansible
source ./hacking/env-setup</p>

<p>echo &ldquo;source ~/ansible/hacking/env-setup&rdquo; >> ~/.bashrc</p>

<p>easy_install pip
pip install paramiko PyYAML jinja2 httplib2</p>

<p>mkdir -p /etc/ansible
cat &lt;<EOF > /etc/ansible/hosts
[ansible]
192.168.101.101</p>

<p>[web]
192.168.102.101</p>

<p>[fluentd]
192.168.102.111
EOF
```</p>

<p>やってることは、ansibleのインストールとInventoryの設定。<br/>
ansibleインストールのための必須条件は、下記。</p>

<ul>
<li>&gt;= Python 2.6(3系はNG)</li>
</ul>


<p>管理される側のサーバは、</p>

<ul>
<li>&gt;= Python 2.4(3系はNG)

<ul>
<li>Python 2.5 &lt; の場合は、python-simplejson も必須</li>
</ul>
</li>
</ul>


<p>Inventoryについては後述。</p>

<p>bootstrap/ansible01_user.shの内容はこれ。
```
$ cat /vagrant/bootstrap/ansible01_user.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>ssh-keygen -t rsa -f ~/.ssh/id_rsa -N &lsquo;&rsquo;</p>

<p>cp ~/.ssh/id_rsa.pub /vagrant/ansible01_publickey
echo &ldquo;source ~/ansible/hacking/env-setup&rdquo; >> ~/.bashrc
```</p>

<p>公開鍵と秘密鍵生成して、公開鍵を、共有ディレクトリに突っ込んで、
あとは、ansibleの環境変数をsourceするように.bashrcに書いてる、と。</p>

<p>公開鍵の格納場所は、このあとの管理ノードがそこから読んで、authorized_keyに設定できるようにしてるわけです。
なんかもっとスマートな方法ないかなー、と思ったんだけど、とりあえずテスト用環境だからいっか。</p>

<p>次は、bootstrap/apserver01.sh。
```
$ cat /vagrant/bootstrap/apserver01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>/vagrant/bootstrap/apserver.sh
/vagrant/bootstrap/not_db.sh
```</p>

<p>なんもしとらん！w<br/>
apserver.shとnot_db.sh呼んでるだけなので、まずは、not_db.shから。</p>

<p>```
$ cat /vagrant/bootstrap/not_db.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y curl
curl -L <a href="http://toolbelt.treasuredata.com/sh/install-ubuntu-precise.sh">http://toolbelt.treasuredata.com/sh/install-ubuntu-precise.sh</a> | sh</p>

<p>mkdir /var/log/td-agent/tmp/
```</p>

<p>ファイル名から察するに、DBサーバじゃなかったら、curlインストールするのと、fluentdインストールしてんだね。
んで、apserver.sh。</p>

<p>```
$ cat /vagrant/bootstrap/apserver.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get install -y apache2
rm -rf /var/www
ln -fs /vagrant /var/www</p>

<p>chmod o+x /var/log/apache2/
chmod o+r /var/log/apache2/access.log</p>

<p>cat &lt;&lt; EOF > /etc/td-agent/td-agent.conf</p>

<h1>tail input</h1>

<p><source>
  type tail
  path /var/log/apache2/access.log
  pos_file /var/log/td-agent/tmp/httpd-access.log.pos
  tag apache.access
  format apache2
</source></p>

<h1>Log Forwarding</h1>

<p><match apache.**>
  type forward</p>

<p>  # primary host
  <server></p>

<pre><code>host 192.168.102.1
port 24224
</code></pre>

<p>  </server>
  # use secondary host
  <server></p>

<pre><code>host 192.168.102.2
port 24224
standby
</code></pre>

<p>  </server></p>

<p>  # use longer flush_interval to reduce CPU usage.
  # note that this is a trade-off against latency.
  flush_interval 60s
</match>
```</p>

<p>apserverには、apacheインストールして、fluentdの細かい設定しております。
今回の、ansibleのエントリには毛ほども関係ない設定です。消してもいいです。</p>

<p>次は、bootstrap/apserver01_user.sh。</p>

<p>```
$ cat /vagrant/bootstrap/apserver01_user.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>mkdir -p ~/.ssh/
touch ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
cat /vagrant/ansible01_publickey >> ~/.ssh/authorized_keys
```
ここで、公開鍵関連の設定をしております。<br/>
なんか突然、/vagrant/ansible01_publickeyをauthorized_keysに入れてます。
Vagrantでは、/vagrantファイルに、Vagrantfileが存在してるディレクトリがマウントされるからっすね。
これで、上のほうで、ansible01.shがやってたことが理解できる、と。</p>

<p>では最後に、bootstrap/fluentd01.shと、bootstrap/fluentd01_user.shの中身を貼付けてだけおきます。
解説なし。</p>

<p>```
$ cat /vagrant/bootstrap/fluentd01.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>/vagrant/bootstrap/not_db.sh</p>

<p>cat &lt;&lt; EOF > /etc/td-agent/td-agent.conf</p>

<h1>Input</h1>

<p><source>
  type forward
  port 24224
</source></p>

<h1>Output</h1>

<p><match apache.**>
  type file
  path /var/log/td-agent/out_apachelog
  time_slice_format %Y%m%d
  time_slice_wait 10m
  time_format %Y%m%dT%H%M%S%z
  compress gzip
  utc
</match>
EOF</p>

<p>$ cat /vagrant/bootstrap/fluentd01_user.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>mkdir -p ~/.ssh/
touch ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
cat /vagrant/ansible01_publickey >> ~/.ssh/authorized_keys
```</p>

<p>あ、あと、bootstrap/all.shがあった。
これも解説なし。</p>

<p>```
$ cat /vagrant/bootstrap/all.sh</p>

<h1>!/usr/bin/env bash</h1>

<p>apt-get update
apt-get install -y vim
apt-get install -y vim-common
```</p>

<p>この辺全部ぶっ込んで、vagrant upしたらうまくいくと思う。たぶん。</p>

<h2>Ansible について</h2>

<hr />

<p><a href="http://www.ansible.com/home">Ansible</a> に関しては、<a href="http://docs.ansible.com/">公式ドキュメント</a>を読み進める形でエントリも書いていきます。
でも、それだと公式ドキュメントの日本語訳にしかならないので、
今回の構成にあった感じとか、わかりやすくしたり、僕だったら実践こんな感じで使うのかなー、
ってのをまじえつついく予定。</p>

<h2>Ansible の使い方</h2>

<hr />

<p>まず、Ansible の簡単な特徴を、下記イメージ図にて。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/ansible_rserver_communication_image.png" alt="ansible" /></p>

<p>図に書いてある感じなのかなー、と感じております。
僕は、chef/puppet なんかに比べて比較的簡単に理解できそうなのでやってみようと思い立ちました。</p>

<p>認証については、今回は、public key 配布して、password なしで通す方向でやります。
きっとこの方法が一番需要が多いと思われますゆえ・・・</p>

<p>Ansible は、ドキュメントを読むと、大きく２通りの使い方があるみたい。
違いも込みであげると、</p>

<ul>
<li>Ad-hoc mode

<ul>
<li>リモートサーバ上でコマンドを実行するモード。
コマンド自体は記録されないので、
何度も反復はしない場合の使い方</li>
</ul>
</li>
<li>Playbook

<ul>
<li>Configuration Management Systemとしての使い方。
定義したグループのサーバに対して、継続的に設定を反映したり、
デプロイしたりする用途</li>
</ul>
</li>
</ul>


<p>今回のエントリは、Ad-hoc mode を使いながら紹介していきます。</p>

<h2>Ansible 全体像</h2>

<p>それで、Ad-hoc mode で使う分にはこの辺を知ってればいいかな・・・という
イメージ図が下記。</p>

<p><img src="http://blog.branch4.pw/images/2014/09/ansible_ad_hoc_image.png" alt="ad-hoc mode" /></p>

<p>これにさっきのイメージ図の認証があれば、大体全体像は理解できる。と思う。
認証の設定は、<a href="http://blog.branch4.pw/blog/2014/09/06/public-key-authentication/">先日書いたブログ</a>を参照くだされ。
それぞれを簡単に説明すると・・・</p>

<ul>
<li>Inventory

<ul>
<li>管理対象サーバをここで設定する</li>
<li>ノードの設定だけじゃなくて、グルーピング機能があったり、色々便利</li>
</ul>
</li>
<li>Ansible configuration

<ul>
<li>ansible全体の挙動の設定

<ul>
<li>例えば、inventoryの設定ファイルの場所</li>
<li>例えば、毎回パスワード確認のプロンプトを出すか</li>
</ul>
</li>
</ul>
</li>
<li>Modules

<ul>
<li>実際に実行する設定/deploy などが実装されてる単位</li>
<li>例えば、commandを実行する場合は、Commands Modules</li>
<li>例えば、file転送する場合は、Files Modules的な感じで、Module単位で実装されている</li>
</ul>
</li>
</ul>


<p>コマンド打つと、この辺の設定を読み込んで実行してくれる、という流れ。</p>

<h2>Ad-hoc mode で使ってみる</h2>

<p>まず、なんか動いてるのをみてテンションあげないとやってられないので、コマンド実行してみよう。</p>

<p>ansible01にログインして今回登録した全サーバにpingを打ってみる。
vagrant関連のconfigで事前の設定は全部してあるから大丈夫。通ります。たぶん。</p>

<p>```
$ vagrant ssh ansible01
$ ansible all -m ping
192.168.101.101 | FAILED => SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue
192.168.102.101 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}</p>

<p>192.168.102.111 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}
```</p>

<p>あ、通ってない・・・w<br/>
ansibleサーバ自身には、公開鍵登録してないからだわ。なので、登録。
(あんまり自分自身にコマンド打つ用途はないので、普段はやらないと思うけど)</p>

<p><code>
$ cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys
$ cat .ssh/authorized_keys #&lt;- 確認してね
</code></p>

<p>再度実行！</p>

<p>```
$ ansible all -m ping
192.168.101.101 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}</p>

<p>192.168.102.111 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}</p>

<p>192.168.102.101 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}
```</p>

<p>おー。うまくいった。よしよし。では諸設定の説明をば。</p>

<h3>Inventory</h3>

<p><a name="inventory"></a>
全体像のイメージ図に出て来た３つの要素の一つ、Inventoryについて。</p>

<ul>
<li>Inventory

<ul>
<li>管理対象サーバをここで設定する</li>
<li>ノードの設定だけじゃなくて、グルーピング機能があったり、色々便利</li>
</ul>
</li>
</ul>


<p>って上で書いてた。</p>

<p>まず、Inventoryファイルは、デフォルトの、/etc/ansible/hosts に以下のように作成します。
(ファイルの場所変更するには、Ansible Configuration に設定する。後述しますわ)</p>

<p>```
$ cat /etc/ansible/hosts
[ansible]
192.168.101.101</p>

<p>[web]
192.168.102.101</p>

<p>[fluentd]
192.168.102.111
```</p>

<p>四角い括弧のなかが、グループ名で、その下に書いてあるIPアドレスがそのグループに所属するホストになります。<br/>
ホスト名解決はできないぽ。</p>

<p>apserver01 192.168.102.101</p>

<p>みたいに書いたら、名前解決できんのかと思ったら、できまてん。なので、名前解決は、
いまのところの僕の知識だと、外だしソリューションしないといけないのかな。めんどくせ。
ただ、Dynamic Inventoryの項目がドキュメントにあったので、その辺深堀すればそれっぽいのがありそうな予感。</p>

<p>Inventoryには、グルーピング以外にも、変数渡す機能とかもあるけど、
このエントリではここまでに留めて、別途Inventory単体でエントリ書く予定。
壮大になりすぎます。</p>

<p>ad-hoc mode で static Inventoryファイルを使ってコマンド送るときのベースはこんな感じで、
管理対象サーバ/グループの増減に従って、Inventoryファイルを編集しましょうね、な感じです。</p>

<h3>Ansible Configuration</h3>

<p>２つ目の、Ansible Configurationについて。</p>

<p>ansible全体の挙動を決定する設定ファイルのこと。
version1.6以降では、下記の優先順位で評価されます。</p>

<ul>
<li>ANSIBLE_CONFIG (環境変数)</li>
<li>ansible.cfg (under current directory)</li>
<li>~/.ansible.cfg (under home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ul>


<p>version1.5以前では、下記の優先順位。環境変数とcurrent directoryが入れ替わったのね。</p>

<ul>
<li>ansible.cfg (under current directory)</li>
<li>ANSIBLE_CONFIG (環境変数)</li>
<li>~/.ansible.cfg (under home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ul>


<p>ただこれも次のバージョンでは変わってるかもしれないので、<a href="http://docs.ansible.com/intro_configuration.html#the-ansible-configuration-file">ここ</a>を正とするのがよーし。</p>

<h4>何を設定できるの？</h4>

<p>全体の挙動って何よ？ってなるので、例を下記に。</p>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">デフォルト値</th>
<th align="left">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">hostfile       </td>
<td align="left"> /etc/ansible/hosts </td>
<td align="left"> Inventoryファイルの場所</td>
</tr>
<tr>
<td align="left">library        </td>
<td align="left"> /usr/share/ansible </td>
<td align="left"> Moduleの格納場所</td>
</tr>
<tr>
<td align="left">remote_tmp     </td>
<td align="left"> $HOME/.ansible/tmp </td>
<td align="left"> ansibleは、module丸ごとremoteに転送して実行されるので、remoteでの格納先</td>
</tr>
<tr>
<td align="left">forks          </td>
<td align="left"> 5                  </td>
<td align="left"> remoteに同時接続する上限。デフォルトはかなり保守的</td>
</tr>
<tr>
<td align="left">poll_interval  </td>
<td align="left"> 15                 </td>
<td align="left"> 非同期処理への終了確認ポーリング間隔の設定</td>
</tr>
<tr>
<td align="left">sudo_user      </td>
<td align="left"> root               </td>
<td align="left"> playbookに sudo_userの指定がない場合のデフォルト設定</td>
</tr>
<tr>
<td align="left">ask_sudo_pass  </td>
<td align="left"> False              </td>
<td align="left"> sudo時に、password確認のプロンプトをするか</td>
</tr>
<tr>
<td align="left">ask_pass       </td>
<td align="left"> False              </td>
<td align="left"> password確認のプロンプトをするか</td>
</tr>
<tr>
<td align="left">transport      </td>
<td align="left"> smart              </td>
<td align="left"> 転送に何を使うか。smart:ssh/local:localhost?/chroot:?/jail:?。基本ssh</td>
</tr>
<tr>
<td align="left">remote_port    </td>
<td align="left"> 22                 </td>
<td align="left"> remote hostで使うポート番号。Inventoryファイルでホスト毎に上書きできる</td>
</tr>
<tr>
<td align="left">module_lang    </td>
<td align="left"> C                  </td>
<td align="left"> 各モジュール間のやりとりで使う言語</td>
</tr>
</tbody>
</table>


<p>こんな感じで、ほんとうに全体の挙動に関する設定ですわ。大体の設定は、
システムのデフォルト値をここで決めて、個別に、Playbook/Inventoryファイルなんかで決めるイメージ。
他にも項目が沢山あるので、それは別途エントリを作りますかね。</p>

<p>そして設定項目全部みたいときは、<a href="https://github.com/ansible/ansible/blob/devel/examples/ansible.cfg">こちら！</a>で、
大元をみたほうがはやいっす。もちろんgithubは最新なので、ansibleのバージョンによっては
使えないのも入ってると思うので、その辺は調べてみてくだされ。</p>

<h3>Modules</h3>

<p>最後の、Modules について。</p>

<p>ここが、ansibleの実質上のコアなのかな。
ad-hoc modeでは、実行するmoduleを、コマンドラインから指定して、
playbookでは、playbookの中で設定して、各moduleをremoteサーバに転送した後、
各サーバで実行する方式です。</p>

<p>色んなmoduleがあるので、実行したい内容に合わせて選択する形になります。
自作もできるようなので、ない場合は自分で作りましょう。</p>

<p>本エントリは、ad-hoc modeのエントリなので、ad-hoc modeでどうやってmoduleを指定するかを下記に。</p>

<p><code>
$ ansible &lt;targets&gt; -m &lt;module&gt; -a "&lt;arguments to the module&gt;"
</code></p>

<p>まんまだわ。</p>

<h4>targets</h4>

<p><a href="#inventory">Inventory</a>で書いてる何かを指定します。</p>

<ul>
<li>サーバ単体を指定する場合

<ul>
<li>192.168.102.101</li>
</ul>
</li>
<li>グループを指定する場合

<ul>
<li>web</li>
</ul>
</li>
<li>全部を指定する場合

<ul>
<li>all</li>
</ul>
</li>
</ul>


<h4>module</h4>

<p>moduleはね、もう一杯あって、どれを使うのかわかんなくなるね。</p>

<p>例として、/tmp/test っていうファイルを、apserver01に作成して、permissionを777に変更するコマンドを実行してみよう。</p>

<h5>まずは、apserver01 にファイルが存在しないことを確認。</h5>

<p>ansible01で下記を実行する。</p>

<p><code>
$ ansible 192.168.102.101 -m command -a "ls /tmp"
192.168.102.101 | success | rc=0 &gt;&gt;
vagrant-shell
</code></p>

<p>うむ。vagrant-shellってファイルしかないので次に進もう。</p>

<h5>使うmodule 選択とざっくり流れ</h5>

<p>今回は、ファイル作るので・・・command module で普通にtouch実行して、
そのあとに、file module でpermission変更します。</p>

<p>各moduleについては、下記参照。</p>

<ul>
<li><a href="http://docs.ansible.com/command_module.html">Command module</a>

<ul>
<li>引数に、実行するコマンドを渡すと実行してくれる</li>
<li>pipe とか、＆はだめ、対応してない</li>
<li>pipe とか使う場合は、<a href="http://docs.ansible.com/shell_module.html">shell module</a>を使う</li>
</ul>
</li>
<li><a href="http://docs.ansible.com/file_module.html">File module</a>

<ul>
<li>File/Directory/Symbolic link等を作成する</li>
<li>File/Directory等のowner設定変更</li>
<li>File/Directory等のgroup設定変更</li>
<li>File/Directory等のpermission設定変更</li>
</ul>
</li>
</ul>


<p>あ、見事にFile moduleでファイルも作成できる・・・でも今回はcommand で！w</p>

<h5>apserver01上に、ファイル作成</h5>

<p>下記をansible01上で実行してみる。</p>

<p>```
$ ansible 192.168.102.101 -m command -a &ldquo;touch /tmp/test&rdquo;
192.168.102.101 | success | rc=0 >></p>

<p>$ ansible 192.168.102.101 -m command -a &ldquo;ls -l /tmp&rdquo;
192.168.102.101 | success | rc=0 >>
total 4
-rw-rw-r&mdash; 1 vagrant vagrant   0 Sep  7 06:07 test
-rwx&mdash;x&mdash;x 1 vagrant vagrant 159 Aug 30 14:21 vagrant-shell
```</p>

<p>お、できている。スーパー！！！
で、permissionは、664。</p>

<p>次は、permisssion変更します。</p>

<h5>ファイルのpermission変更</h5>

<p>644だったpermissionを777に変更してやります。
permission変更は、file moduleを利用するわけですが、
<a href="http://docs.ansible.com/file_module.html">公式ドキュメント</a>曰く(ちょっと省略してるけど)、</p>

<table>
<thead>
<tr>
<th align="left">parameter </th>
<th align="left"> required  </th>
<th align="left"> default </th>
<th align="left"> choices </th>
<th align="left"> comments</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">force     </td>
<td align="left">  no       </td>
<td align="left"> no      </td>
<td align="left"> yes     </td>
<td align="left"> ２つのケースについて、symlinkの作成を強制する。ひとつは、source fileが存在しない場合(linkを張っておいて、あとからファイル自体は作成する)。もうひとつは、destination が存在していて、かつファイルである場合。(この場合、pathに指定しているファイルを削除して、symlinkを作成する)</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> no      </td>
<td></td>
</tr>
<tr>
<td align="left">group     </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td></td>
</tr>
<tr>
<td align="left">mode      </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> ファイル/ディレクトリのpermission設定。</td>
</tr>
<tr>
<td align="left">owner     </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> ファイル/ディレクトリのowner設定。</td>
</tr>
<tr>
<td align="left">path      </td>
<td align="left">  yes      </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> 管理対象ファイルのpath。file module内で唯一必須項目。 Aliases: dest, name</td>
</tr>
<tr>
<td align="left">recurse   </td>
<td align="left">  no       </td>
<td align="left"> no      </td>
<td align="left"> yes     </td>
<td align="left"> ファイルの設定を再起的に実施するかどうか。(state=directoryにのみ適用する) (Ansible 1.1以降実装)</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> no      </td>
<td></td>
</tr>
<tr>
<td align="left">src       </td>
<td align="left">  no       </td>
<td align="left">         </td>
<td align="left">         </td>
<td align="left"> state=linkにのみ適用する。linkするファイルのpathを指定。絶対path/相対path/存在しないpathを指定可能です。相対pathは展開されません。</td>
</tr>
<tr>
<td align="left">state     </td>
<td align="left">  no       </td>
<td align="left"> file    </td>
<td align="left"> file    </td>
<td align="left"> fileを指定して、srcが存在しない場合、ファイルは作成されません。作成したい場合は、copy/template moduleを使いましょう。はて？fileって必要なの？？</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> link    </td>
<td align="left"> linkを指定した場合、symbolick linkが作成されるか、変更される。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> directory </td>
<td align="left"> directoryを指定した場合, 存在しない場合、直接の全サブディレクトリが作成されます。version1.7以降では、modeで指定したpermissionに従って作成される。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> hard    </td>
<td align="left"> hardlinkを作成する場合は、hardを指定する。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> touch   </td>
<td align="left"> touch(version1.4以降)を指定した場合、Linux コマンドのtouchと同じ挙動をする。</td>
</tr>
<tr>
<td align="left">          </td>
<td align="left">           </td>
<td align="left">         </td>
<td align="left"> absent  </td>
<td align="left"> absentを指定した場合、ディレクトリは再起的に削除されて、ファイルとsymlinkは削除される。</td>
</tr>
</tbody>
</table>


<p>この表からわかる通り、file moduleで必須なオプションは、"path" のみ。
pathで指定されたファイル/ディレクトリ等に対して、何をするかを、他のオプションで指定する寸法。
今回は、permissionを777に変更したいので、"mode=0777" を指定して、実行してみる。</p>

<p>```
$ ansible 192.168.102.101 -m file -a &ldquo;path=/tmp/test mode=0777&rdquo;
192.168.102.101 | success >> {</p>

<pre><code>"changed": true,
"gid": 1000,
"group": "vagrant",
"mode": "0777",
"owner": "vagrant",
"path": "/tmp/test",
"size": 0,
"state": "file",
"uid": 1000
</code></pre>

<p>}</p>

<p>$ ansible 192.168.102.101 -m command -a &ldquo;ls -l /tmp&rdquo;
192.168.102.101 | success | rc=0 >>
total 4
-rwxrwxrwx 1 vagrant vagrant   0 Sep  7 06:07 test
-rwx&mdash;x&mdash;x 1 vagrant vagrant 159 Aug 30 14:21 vagrant-shell
```</p>

<p>おーーーー、変わった変わった。ちゃんちゃん。
無事に、testファイルのpermissionが777になっておりました。
よかったよかった。</p>

<p>というわけで、ansibleは、大量のサーバに任意のコマンドをばこばこ発行したり、色々できる
便利なツールでした。おしまい。</p>

<script type="text/javascript" language="javascript">
  num = Math.floor( Math.random() * 6 );
  document.write( aff[ num ]);
</script>

]]></content>
  </entry>
  
</feed>
